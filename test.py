import random
import time
from geopy.exc import GeocoderUnavailable
from telebot import *
from telebot.apihelper import ApiTelegramException
from telebot.types import *
import sqlite3
from geopy.geocoders import Nominatim
from random import shuffle, choice
import math
from datetime import datetime, timedelta
from threading import Thread, Lock

# —Å—Ç—Ä–æ–∫–∞ –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—É–¥–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–Ω–∏–∫–æ–ª—å–Ω—ã–π url –∞–¥—Ä–µ—Å. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω—ë–º —Ä–∞—Å—Å–∫–∞–∑–∞–ª –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_anket
string = (
        "0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ! # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~" + ' "').split()

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
bot = TeleBot('6921263973:AAG94w0bjhvTvII3NoaQ8HGCFpkImruFRuM')
# –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect('DayVinchick.db', check_same_thread=False)
c = db.cursor()

# —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø–æ–∫–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π
lock = Lock()

# —Å–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
try:
    lock.acquire(True)

    c.execute('SELECT id_tg, lang FROM users')
    for i in c.fetchall():
        end_message = {'ru': '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞!',
                       'uk': '–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start, —â–æ–± –∑–∞–Ω–æ–≤–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞!',
                       'en': 'Enter the /start command to reactivate the bot!',
                       'id': 'Masukkan perintah /start untuk mengaktifkan kembali bot!'}
        try:
            bot.send_message(i[0], end_message[i[1]], reply_markup=ReplyKeyboardRemove())
        except ApiTelegramException:
            pass
finally:
    lock.release()


# —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –ø–æ—Å–ª—ë –µ—ë –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
def wait_anket(message, after_what):
    id = message.from_user.id
    lang = get_something('lang', message.from_user.id)[0]

    # —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    user_wait_anket = {'ru': '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', 'uk': '–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏', 'en': 'View profiles', 'id': 'Lihat profil'}
    # —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –Ω–µ —Å –∫–Ω–æ–ø–∫–∏
    bot_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                 'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

    if message.text == user_wait_anket[lang]:
        try:
            lock.acquire(True)
            # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—ã
            c.execute('UPDATE users SET is_search = True WHERE id_tg = ?', (id,))
            db.commit()
        finally:
            lock.release()

        if after_what == 'wait':
            func = lambda message: MyAnket().one_my_anket(message, 'command')
        else:
            func = Menu().after_something

        Lang().one_lang(message, func)
    else:
        send_message = bot.send_message(message.chat.id, bot_error[lang])
        bot.register_next_step_handler(send_message, lambda message: wait_anket(message, after_what))


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É. –ü–∞—Ä–∞–º–µ—Ç—Ä id —É–∫–∞–∑—ã–≤–∞–µ—Ç —á—å—é –∞–Ω–∫–µ—Ç—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä love_anket –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å '–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞'
def send_anket(message, id, markup=None, love_anket=False, my_anket=False):
    text_love_anket = {'ru': '–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n', 'uk': '–ö–æ–º—É—Å—å —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—è —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n',
                       'en': 'Someone liked your profile:\n\n', 'id': 'Seseorang seperti profil Anda:\n\n'}
    text_my_anket = {'ru': '–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:',
                     'uk': '–¢–≤—ñ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π id, –∑–∞ —è–∫–∏–º –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:',
                     'en': 'Your unique id, which can be used to find your profile:',
                     'id': 'ID unik Anda, yang dapat digunakan untuk menemukan profil Anda:'}

    lang = get_something('lang', message.from_user.id)[0]  # –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –Ω–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É id, –∞ –ø–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name, age, description, photo1, photo2, photo3, video, long, lat, insta = get_something(
        'name, age, description, photo1, photo2, photo3, video, long, lat, instagram', id)
    try:
        # –≤ –∫–∞—á–µ—Å—Ç–≤–µ user_agent –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–µ—Ä–µ–¥–∞—ë–º —Ä–∞–Ω–¥–æ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É. –≠—Ç–æ –±—É–¥–µ—Ç —á–∞—Å—Ç—å url –∞–¥—Ä–µ—Å–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –±—É–¥–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å API. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞ –∫–∞–∂–¥—ã–π url –∞–¥—Ä–µ—Å (—è –Ω–∞–¥–µ—é—Å—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ url, –∞ –Ω–µ –Ω–∞ ip –∞–¥—Ä–µ—Å) –Ω–∞–ª–æ–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤, –∏ –ø–æ—ç—Ç–æ–º—É –º—ã –µ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –º–µ–Ω—è–µ–º
        geolocator = Nominatim(user_agent=random_str())
        location_address = geolocator.reverse(f"{lat}, {long}", language=lang, zoom=13)
    except GeocoderUnavailable as ge_error:
        print('GeocoderUnavailable ERROR - ' + str(ge_error))
        location_address = ''
    send_text = f"{name}, {age}\n{location_address}"

    if insta:
        send_text += '\n\n' + 'Insta: ' + str(insta)

    if description is not None:
        send_text += '\n\n' + description

    if love_anket:
        send_text = text_love_anket[lang] + send_text

    if my_anket:
        send_text += '\n\n' + text_my_anket[lang]

    if video is not None:
        new_message = bot.send_video(message.chat.id, video, caption=send_text, reply_markup=markup)
    elif photo2 is None and photo1 is not None:
        new_message = bot.send_photo(message.chat.id, photo1, send_text, reply_markup=markup)
    else:
        media = [InputMediaPhoto(photo1, ), InputMediaPhoto(photo2)]

        if photo3 is not None:
            media.append(InputMediaPhoto(photo3))

        bot.send_media_group(message.chat.id, media)
        new_message = bot.send_message(message.chat.id, send_text, reply_markup=markup)

    if my_anket:
        return bot.send_message(message.chat.id, message.from_user.id)

    return new_message


# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç–∞—ë—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∞–π–¥–∏—à–Ω–∏–∫—É
def get_something(ctolb, id):
    try:
        lock.acquire(True)
        c.execute(f'SELECT {ctolb} FROM users WHERE id_tg = ?', (str(id),))
    finally:
        lock.release()
    return c.fetchone()


# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
def random_str(lenght=8):
    shuffle(string)
    return "".join([choice(string) for i in range(lenght)])


# —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –∞–Ω–∫–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –Ø –ø–µ—Ä–µ–¥–∞–≤–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –≤ –º–µ—Ç–æ–¥–µ sort
def to_sort(x):
    user_id = get_something('users_id', x[0])[0]

    try:
        lock.acquire(True)

        c.execute('SELECT COUNT(users_id) FROM referrals WHERE users_id = ? GROUP BY users_id',
                  (user_id,))
        count = c.fetchone()
    finally:
        lock.release()

    count = 0 if count is None else count[0]

    return count


# –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–¥–Ω–∞ –∏–∑ —Ç—Ä—ë—Ö –∫–æ–º–∞–Ω–¥, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –∞ –∏–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False. –Ø –≤—ã–∑—ã–≤–∞—é —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–µ —á—Ç–æ-—Ç–æ
def errors(message, self=None, func=None):
    # –ø–∞—Ä–∞–º–µ—Ç—Ä self —è —É–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –∞–Ω–∫–µ—Ç—ã, –∞ –ø–∞—Ä–∞–º–µ—Ç—Ä func –ª–∏—à—å —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ü–∞—Ä–∞–º–µ—Ç—Ä func –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –∑–Ω–∞–ª–∞, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑–≤–∞—Ç—å –ø–æ—Ç–æ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    exec(f'global run{message.from_user.id}\nrun{message.from_user.id}=None')

    bot_complaint = {
        'ru': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã\n\n1. üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n2. üíä –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤.\n3. üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.\n4. ü¶® –î—Ä—É–≥–æ–µ.\n***\n9. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.',
        'uk': '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏\n\n1. üîû –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö.\n2. üíä –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫—ñ–≤.\n3. üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –ø–æ—Å–ª—É–≥.\n4. ü¶® –Ü–Ω—à–µ.\n***\n9. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥.',
        'en': 'Specify the reason for the complaint\n\n1. üîû Adult material.\n2. üíä Drug propaganda.\n3. üí∞ Sale of goods and services.\n4. ü¶® Other.\n***\n9. Go back.',
        'id': 'Tentukan alasan pengaduan\n\n1. üîû Bahan dewasa.\n2. üíä Propaganda narkoba.\n3. üí∞ Penjualan barang dan jasa.\n4. ü¶® Lainnya.\n***\n9. Kembali.'}
    bot_complaint_error = {'ru': '–ñ–∞–ª–æ–±—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç—ã',
                           'uk': '–°–∫–∞—Ä–≥—É –º–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—á–∞—Å –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞–Ω–∫–µ—Ç',
                           'en': 'You can leave a complaint only when viewing the questionnaire',
                           'id': 'Anda dapat meninggalkan keluhan hanya saat melihat kuesioner'}
    bot_not_reg = {"ru": '–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!',
                   'uk': '–ü–µ—Ä—à –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –∞–Ω–∫–µ—Ç—É!',
                   'en': 'Before using this command, fill out the profile!',
                   'id': 'Sebelum menggunakan perintah ini, isi profil!'}
    user_complaint = {'all': ['1üîû', '2üíä', '3üí∞', '4ü¶®', '9']}
    user_complaint_back = {'ru': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'], 'uk': ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥'], 'en': ['Go back'], 'id': ['Kembali']}

    commands = {'/myprofile': lambda: MyAnket().one_my_anket(message, 'command'),
                '/language': lambda: Lang().one_lang(message, func=lambda message: Menu().after_something(message)),
                '/start': lambda: start_func(message)}
    list_commands = ['/myprofile', '/language', '/start']

    lang = get_something('lang', message.from_user.id)[0]

    text = message.text

    if text in list_commands:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
        reg = get_something('reg', message.from_user.id)[0]
        if reg or text == '/start':
            commands[text]()
            return False

        send_message = bot.send_message(message.chat.id, bot_not_reg[lang])
        bot.register_next_step_handler(send_message, func)
        return False
    elif text == '/complaint':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
        reg = get_something('reg', message.from_user.id)[0]
        if reg:
            if self:
                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
                markup.add(*user_complaint['all'])

                send_message = bot.send_message(message.chat.id, bot_complaint[self.lang], reply_markup=markup)
                bot.register_next_step_handler(send_message, self.complaint)

                return False

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*user_complaint_back[lang])

            send_message = bot.send_message(message.chat.id, bot_complaint_error[lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, errors)

            return False

        send_message = bot.send_message(message.chat.id, bot_not_reg[lang])
        bot.register_next_step_handler(send_message, func)
        return False
    elif text in user_complaint_back[lang]:
        ViewsAnket().start(message)
        return False

    return True


# –∫–ª–∞—Å—Å –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
class Lang:
    def __init__(self):
        self.bot_lang = {'ru': '–Ø–∑—ã–∫:', 'uk': '–ú–æ–≤–∞:', 'en': 'Language:', 'id': 'Bahasa:'}
        self.bot_lang_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                               'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

        self.user_lang = {'all': ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'üá¨üáß English', 'üá≤üáæ Malay']}

        self.server_lang = {'üá∑üá∫ –†—É—Å—Å–∫–∏–π': 'ru', 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': 'uk', 'üá¨üáß English': 'en', 'üá≤üáæ Malay': 'id'}

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    def one_lang(self, message, func=None):
        self.lang = get_something('lang', message.from_user.id)[0]
        self.func = func
        self.id = message.from_user.id

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(*self.user_lang['all'])

        send_message = bot.send_message(message.chat.id, self.bot_lang[self.lang], reply_markup=markup)
        bot.register_next_step_handler(send_message, self.two_lang)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∏–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫
    def two_lang(self, message):
        text = message.text

        if text in self.user_lang['all']:
            try:
                lock.acquire(True)
                c.execute('UPDATE users SET lang = ? WHERE id_tg = ? ', (self.server_lang[text], self.id))
                db.commit()
            finally:
                lock.release()
            if not self.func is None:
                self.func(message)
        else:
            if errors(message, func=self.two_lang):
                send_message = bot.send_message(message.chat.id, self.bot_lang_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_lang)


# –∫–ª–∞—Å—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∞ —Å–æ–æ—â–µ–Ω–∏—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
class Start:
    def __init__(self):
        self.bot_description = {
            'ru': '–£–∂–µ –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –∑–Ω–∞–∫–æ–º—è—Ç—Å—è –≤ –î–∞–π–≤–∏–Ω—á–∏–∫–µüòç\n\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑–µ–πüë´',
            'uk': '–í–∂–µ –º—ñ–ª—å–π–æ–Ω–∏ –ª—é–¥–µ–π –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è —É –î–∞–π–≤–∏–Ω—á–∏–∫–µüòç\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É –∞–±–æ –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∑—ñ–≤‚ò∫',
            'en': 'Already millions of people meet in Daivinchiküòç\n\nI will help you find a mate or just friendsüë´',
            'id': 'Sudah jutaan orang bertemu di Daivinchiküòç\n\nSaya akan membantu Anda menemukan jodoh atau hanya temanüë´'}
        self.bot_description_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                                      'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}
        self.bot_warning = {
            'ru': '‚ùó–ü–æ–º–Ω–∏, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö. –ë–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º. –ü—Ä–æ–¥–æ–ª–∂–∞—è —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.',
            'uk': '‚ùó–ü–∞–º\'—è—Ç–∞–π—Ç–µ, —â–æ –≤ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–≤–∞—Ç–∏ —Å–µ–±–µ –∑–∞ —ñ–Ω—à–∏—Ö. –ë–æ—Ç –Ω–µ –∑–∞–ø–∏—Ç—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —ñ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –±—É–¥—å-—è–∫–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏. –ü—Ä–æ–¥–æ–≤–∂—É—é—á–∏, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞ –Ω–∞ —Å–≤—ñ–π —Å—Ç—Ä–∞—Ö —ñ —Ä–∏–∑–∏–∫.',
            'en': '‚ùóRemember that on the Internet people can impersonate others. The bot does not ask personal data and does not identify users by any documents. By continuing, you agree to use of the bot at your own risk.',
            'id': '‚ùóIngat bahwa di internet orang bisa meniru orang lain. Bot tidak meminta data pribadi dan tidak mengidentifikasi pengguna dengan dokumen apa pun. Dengan melanjutkan, Anda setuju untuk menggunakan bot dengan risiko Anda sendiri.'}
        self.bot_warning_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                                  'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

        self.user_descpiption = {'ru': ['üëå–¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º'], 'uk': ['üëå–¥–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ'], 'en': ['üëålet\'s start'],
                                 'id': ['üëåmari kita mulai']}
        self.user_warning = {'ru': ['üëåOk'], 'uk': ['üëå–ì–∞—Ä–∞–∑–¥'], 'en': ['üëåOk'], 'id': ['üëåOk']}

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    def one_start(self, message):
        self.lang = get_something('lang', message.from_user.id)[0]

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*self.user_descpiption[self.lang])

        send_message = bot.send_message(message.chat.id, self.bot_description[self.lang], reply_markup=markup)
        bot.register_next_step_handler(send_message, self.two_start)

    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–µ
    def two_start(self, message):
        text = message.text

        if text in self.user_descpiption[self.lang]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_warning[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_warning[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.three_start)
        else:
            if errors(message, func=self.two_start):
                send_message = bot.send_message(message.chat.id, self.bot_description_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_start)

    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ –≤—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    def three_start(self, message):
        text = message.text

        if text in self.user_warning[self.lang]:
            Anket().one_anket(message)
        else:
            if errors(message, func=self.three_start):
                send_message = bot.send_message(message.chat.id, self.bot_warning_error[self.lang])
                bot.register_next_step_handler(send_message, self.three_start)


# –∫–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
class Anket:
    def __init__(self):
        self.bot_age = {'ru': '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', 'uk': '–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?', 'en': 'Your age?',
                        'id': 'Berapa umur anda?'}
        self.bot_age_error = {'ru': '–£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã',
                              'uk': '–í–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–∫, —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏', 'en': 'Tell me your age, numbers only',
                              'id': 'Sila masukkan umur yang betul, hanya nombor'}
        self.bot_male = {'ru': '–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º', 'uk': '–¢–µ–ø–µ—Ä –æ–±–µ—Ä–µ–º–æ —Å—Ç–∞—Ç—å', 'en': 'Specify your gender',
                         'id': 'Sekarang mari kita menyertakan jantina'}
        self.bot_male_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                               'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}
        self.bot_who_love = {'ru': '–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', 'uk': '–•—Ç–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?', 'en': 'Who are you looking for?',
                             'id': 'Siapa yang menarik minat anda?'}
        self.bot_who_love_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                                   'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}
        self.bot_other_age = {
            'ru': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –∞–Ω–∫–µ—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ -\n10/17\n–≠—Ç–æ –±—É–¥–µ—Ç –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–∞–º –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –∞–Ω–∫–µ—Ç—ã –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç 10 –¥–æ 17 –ª–µ—Ç.',
            'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ –ª—é–¥–µ–π, —è–∫–∏—Ö —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏ –≤ –∞–Ω–∫–µ—Ç—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ - \n10/17\n–¶–µ –±—É–¥–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∞–º –±—É–¥—É—Ç—å –ø–æ—Ç—Ä–∞–ø–ª—è—Ç–∏ –∞–Ω–∫–µ—Ç–∏ –≤—ñ–∫–æ–º –≤—ñ–¥ 10 –¥–æ 17 —Ä–æ–∫—ñ–≤.',
            'en': 'Send the minimum and maximum age of the people you want to see in the questionnaire in the following format - \n10/17\nThis will mean that you will come across questionnaires aged from 10 to 17 years.',
            'id': 'Kirim usia minimum dan maksimum orang yang ingin Anda lihat dalam kuesioner dalam format berikut - \n10/17\nIni berarti Anda akan menemukan kuesioner berusia 10 hingga 17 tahun.'}
        self.bot_other_age_error = {
            'ru': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π -\n<—á–∏—Å–ª–æ>/<—á–∏—Å–ª–æ>\n–ë–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ! –ü—Ä–∏–º–µ—Ä -\n10/17',
            'uk': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ—Ç—Ä—ñ–±–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π - \n<—á–∏—Å–ª–æ>/<—á–∏—Å–ª–æ>\n –ë–µ–∑ –∫—Ä–∞–ø–∫–∏ –≤ –∫—ñ–Ω—Ü—ñ! –ü—Ä–∏–∫–ª–∞–¥ - \n10/17',
            'en': 'Invalid format. We need this one - \n<number>/<number>\n Without a dot at the end! Example - \n10/17',
            'id': 'Format tidak valid. Kita membutuhkan yang ini - \n<nomor>/<nomor>\n Tanpa titik di akhir! Contoh- \n10/17'}
        self.bot_other_age_error_age = {
            'ru': '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –≤–æ–∑—Ä–∞—Å—Ç. –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 110 –∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!',
            'uk': '–ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –∞–±–æ –º–∞–ª–µ–Ω—å–∫–∏–π –≤—ñ–∫. –í—ñ–∫ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 110 —ñ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –º–µ–Ω—à–µ –¥—Ä—É–≥–æ–≥–æ!',
            'en': 'Too old or too young. The age should be from 1 to 110 and the first number should be less than the second!',
            'id': 'Terlalu tua atau terlalu muda. Usia harus dari 1 hingga 110 dan angka pertama harus kurang dari yang kedua!'}
        self.bot_city = {'ru': '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.',
                         'uk': '–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞? –í—ñ–¥–ø—Ä–∞–≤ –≥–µ–æ–º–µ—Ç–∫—É –∞–±–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.',
                         'en': 'What city are you from? Send the geometry or the name of the city.',
                         'id': 'Dari kota mana kamu berasal? Kirim geometri atau nama kota.'}
        self.bot_city_show_adress = {'ru': '–≠—Ç–æ —Ç–≤–æ–π –∞–¥—Ä–µ—Å?\n\n', 'uk': '–¶–µ —Ç–≤–æ—è –∞–¥—Ä–µ—Å–∞?\n\n',
                                     'en': 'Is this your address?\n\n', 'id': 'Apakah ini alamat anda?\n\n'}
        self.bot_city_show_adress_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                                           'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}
        self.bot_city_error = {"ru": '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–º–µ—Ç–∫—É, –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                               'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–º–µ—Ç–∫—É, –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'en': 'Send location, city not found',
                               'id': 'Kirim lokasi, kota tidak ditemukan'}
        self.bot_city_error_none = {"ru": '–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                                    'uk': '–í–∏ —â–µ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –º—ñ—Å—Ü–µ–ø–æ–ª–æ–∂–µ–Ω–Ω—è',
                                    'en': 'You haven\'t sent the location yet',
                                    'id': 'Anda belum mengirim lokasi belum'}
        self.bot_name = {'ru': '–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?', 'uk': '–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?', 'en': 'What‚Äôs your name?',
                         'id': 'Apa aku patut panggil?'}
        self.bot_name_error = {"ru": '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª–∏–Ω–Ω–æ—é –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤',
                               'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–º\'—è –¥–æ–≤–∂–∏–Ω–æ—é –Ω–µ –±—ñ–ª—å—à–µ 50 —Å–∏–º–≤–æ–ª—ñ–≤',
                               'en': 'Send a name no longer than 50 characters',
                               'id': 'Kirim Nama tidak lebih dari 50 karakter'}
        self.bot_instagram = {
            'ru': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–µ –∏–ª–∏ –Ω–∏–∫ —Å @. –ü—Ä–∏–º–µ—Ä: https://www.instagram.com/dava_m –∏–ª–∏ @dava_m',
            'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –≤ Instagram –∞–±–æ –Ω—ñ–∫ –∑ @. –ü—Ä–∏–∫–ª–∞–¥: https://www.instagram.com/dava_m –∞–±–æ @dave_m',
            'en': 'Send a link to your Instagram profile or a nickname with @. Example: https://www.instagram.com/dava_m or @dave_m',
            'id': 'Kirim tautan ke profil Instagram Anda atau nama panggilan dengan @. Contoh: https://www.instagram.com/dava_m atau @dave_m'}
        self.bot_instagram_error = {'ru': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–∞ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞',
                                    'uk': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞ –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è',
                                    'en': 'Invalid username format or non-existent link',
                                    'id': 'Format nama pengguna tidak valid atau tautan tidak ada'}
        self.bot_descpription = {
            'ru': '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, —á–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é.',
            'uk': '–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ, –∫–æ–≥–æ —Ö–æ—á–µ—à –∑–Ω–∞–π—Ç–∏, —á–∏–º –ø—Ä–æ–ø–æ–Ω—É—î—à –∑–∞–π–Ω—è—Ç–∏—Å—å. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–æ–±—ñ –∫–æ–º–ø–∞–Ω—ñ—é',
            'en': 'Tell more about yourself. Who are you looking for? What do you want to do? I\'ll find the best matches.',
            'id': 'Beritahu tentang diri anda lebih dan siapa yang anda mahu cari, apa yang anda mahu lakukan. Inilah akan membantu anda mencari seseorang yang baik.'}
        self.bot_descpription_error = {'ru': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç', 'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç', 'en': 'Send a text',
                                       'id': 'Mengirim pesan teks'}
        self.bot_photo = {
            'ru': '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –µ–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'uk': '–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ –∑–∞–ø–∏—à–∏ –≤—ñ–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫), –π–æ–≥–æ –ø–æ–±–∞—á–∞—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ',
            'en': 'Send your photo or video üëç (up to 15 sec) for other users to see',
            'id': 'Sekarang sila menghantar foto atau video üëç (hingga 15 detik), pengguna lain akan melihatnya'}
        self.bot_photo_error = {'ru': '–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ(–¥–æ 15 —Å–µ–∫)', 'uk': '–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫)',
                                'en': 'Send your photo or video (up to 15 sec)',
                                'id': 'Sila menghantar foto atau video(hingga 15 detik)'}
        self.bot_photo_avatar_error = {'ru': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ —Å –∞–≤–∞—Ç–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!',
                                       'uk': '–ù–µ –≤–∏–π—à–ª–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ –∑ –∞–≤–∞—Ç–∞—Ä–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∞–±–æ –≤—ñ–¥–µ–æ!',
                                       'en': 'I couldn\'t download a photo from the avatar, send a photo or video!',
                                       'id': 'Saya tidak dapat mengunduh foto dari avatar, mengirim foto atau video!'}
        self.bot_photo_error_none = {'ru': '–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ', 'uk': '–í–∏ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ —Ñ–æ—Ç–æ',
                                     'en': 'You haven\'t sent a photo yet', 'id': 'Anda belum mengirim foto'}
        self.bot_edit_photo = {'ru': '–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≤–∏–¥–µ–æ üëç (–¥–æ 15 —Å–µ–∫)',
                               'uk': '–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —á–∏ –∑–∞–ø–∏—à–∏ –≤—ñ–¥–µ–æ üëç  (–¥–æ 15 —Å–µ–∫)',
                               'en': 'Send your photo/video (up to 15 sec)',
                               'id': 'Sila hantarkan foto atau video üëç (hingga 15 detik)'}
        self.bot_photo_mane = {
            'ru': '–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ - # –∏–∑ 3. –ï—â—ë –æ–¥–Ω–æ?',
            'uk': '–§–æ—Ç–æ –¥–æ–¥–∞–Ω–µ ‚Äì # –∑ 3. –©–µ –æ–¥–Ω–µ?',
            'en': 'Photo added  ‚Äì # from 3. One more?',
            'id': 'Foto ditambah ‚Äì 1 daripada 3 . –Üatu lagi?'
        }

        self.user_male = {'ru': ['–Ø –¥–µ–≤—É—à–∫–∞', '–Ø –ø–∞—Ä–µ–Ω—å'], 'uk': ['–Ø –¥—ñ–≤—á–∏–Ω–∞', '–Ø —Ö–ª–æ–ø–µ—Ü—å'], 'en': ['Female', 'Male'],
                          'id': ['Aku gadis', 'Aku lekaki']}
        self.user_who_love = {'ru': ['–î–µ–≤—É—à–∫–∏', '–ü–∞—Ä–Ω–∏', '–í—Å—ë —Ä–∞–≤–Ω–æ'], 'uk': ['–î—ñ–≤—á–∞—Ç–∞', '–•–ª–æ–ø—Ü—ñ', '–í—Å–µ –æ–¥–Ω–æ'],
                              'en': ['Women', 'Men', 'No matter'], 'id': ['Gadis', 'Lekaki', 'Tak peduli']}
        self.user_other_age = {'ru': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π'],
                               'uk': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', '–õ–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π'], 'en': ['Skip', 'Leave current age'],
                               'id': ['Langkau', 'Tinggalkan usia saat ini']}
        self.user_city = {'ru': ['–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º', '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ'],
                          'uk': ['–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –º—ñ—Å—Ü–µ–º —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è', '–õ–∏—à–∏—Ç–∏ —Ç–∞–∫, —è–∫ —î'],
                          'en': ['Share Location', 'Leave current'], 'id': ['Berbagi Lokasi', 'Simpan semasa']}
        self.user_city_show_adress = {'ru': ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'], 'uk': ['–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏', '–∑–º—ñ–Ω–∏—Ç–∏ –∞–¥—Ä–µ—Å—É'],
                                      'en': ['Continue', 'Change Address'], 'id': ['Lanjutkan', 'Ubah Alamat']}
        self.user_instagram = {'ru': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π'],
                               'uk': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π'], 'en': ['Skip', 'Leave the current link'],
                               'id': ['Langkau', 'Tinggalkan tautan saat ini']}
        self.user_descpription = {'ru': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç'],
                                  'uk': ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', '–õ–∏—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç'], 'en': ['Skip', 'Leave current text'],
                                  'id': ['Langkau', 'Simpan teks semasa']}
        self.user_photo = {'ru': ['–í–∑—è—Ç—å —Å –∞–≤–∞—Ç–∞—Ä–∫–∏', '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ'],
                           'uk': ['–í–∑—è—Ç–∏ –∑ –∞–≤–∞—Ç–∞—Ä–∫–∏', '–õ–∏—à–∏—Ç–∏ —Ç–∞–∫, —è–∫ —î'],
                           'en': ['Take from the avatar', 'Leave current'],
                           'id': ['Ambil dari avatar', 'Simpan semasa']}
        self.user_photo_mane = {'ru': ['–≠—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ'], 'uk': ['–¶–µ –≤—Å–µ, –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–æ—Ç–æ'],
                                'en': ['Done, save the photos'], 'id': ['Selesai, simpan foto']}
        self.user_edit = {'ru': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'], 'uk': ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥'],
                          'en': ['Go back'], 'id': ['Kembali']}

    # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞
    def one_anket(self, message):
        self.edit = False
        self.count_photo = 0
        self.photo1 = None
        self.photo2 = None
        self.photo3 = None
        self.do = 'quest'
        self.lang = get_something('lang', message.from_user.id)[0]
        self.id = message.from_user.id

        old_age = get_something('age', self.id)[0]
        if old_age is not None:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(str(old_age))
        else:
            markup = ReplyKeyboardRemove()

        send_message = bot.send_message(message.chat.id, self.bot_age[self.lang], reply_markup=markup)
        bot.register_next_step_handler(send_message, self.two_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∞
    def two_anket(self, message):
        text = message.text

        if text.isdigit():
            text = int(text)
            if text <= 110:
                self.age = text

                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(*self.user_male[self.lang])

                send_message = bot.send_message(message.chat.id, self.bot_male[self.lang],
                                                reply_markup=markup)
                bot.register_next_step_handler(send_message, self.three_anket)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_age_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_anket)
        else:
            if errors(message, func=self.two_anket):
                send_message = bot.send_message(message.chat.id, self.bot_age_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≥–æ, –∫—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    def three_anket(self, message):
        text = message.text

        if text in self.user_male[self.lang]:
            if text == self.user_male[self.lang][0]:
                self.male = 'w'
            else:
                self.male = 'm'

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
            markup.add(*self.user_who_love[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_who_love[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.four_anket)
        else:
            if errors(message, func=self.three_anket):
                send_message = bot.send_message(message.chat.id, self.bot_male_error[self.lang])
                bot.register_next_step_handler(send_message, self.three_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω–æ, –∫—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–Ω–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å
    def four_anket(self, message):
        text = message.text

        if text in self.user_who_love[self.lang]:
            if text == self.user_male[self.lang][0]:
                self.love = 'w'
            elif text == self.user_male[self.lang][1]:
                self.love = 'm'
            else:
                self.love = 'n'

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            self.old_min_age, self.old_max_age = get_something('min_age, max_age', self.id)

            if self.old_min_age is None or self.old_max_age is None:
                markup.add(self.user_other_age[self.lang][0])
            elif self.old_min_age == int(self.age) - 5 and self.old_max_age == int(self.age) + 5:
                markup.add(self.user_other_age[self.lang][0])
            else:
                markup.add(*self.user_other_age[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_other_age[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.five_anket)
        else:
            if errors(message, func=self.four_anket):
                send_message = bot.send_message(message.chat.id, self.bot_who_love_error[self.lang])
                bot.register_next_step_handler(send_message, self.four_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–æ –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–æ–∑–æ–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –¥–ª—è –Ω–µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    def five_anket(self, message):
        text = message.text

        ages = text.split('/')

        if len(ages) == 2 and ages[0] != '':
            if ages[0].isdigit() and ages[1].isdigit():
                min_age, max_age = list(map(int, ages))
                if (min_age > 0 and max_age <= 110) and (min_age < max_age):
                    self.min_age, self.max_age = min_age, max_age

                    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                    self.is_geo = get_something('long', self.id)[0]
                    if self.is_geo is None:
                        markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True))
                    else:
                        markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True),
                                   self.user_city[self.lang][1])

                    send_message = bot.send_message(message.chat.id, self.bot_city[self.lang],
                                                    reply_markup=markup)
                    bot.register_next_step_handler(send_message, self.six_anket)
                else:
                    send_message = bot.send_message(message.chat.id, self.bot_other_age_error_age[self.lang])
                    bot.register_next_step_handler(send_message, self.five_anket)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_other_age_error[self.lang])
                bot.register_next_step_handler(send_message, self.five_anket)
        elif text == self.user_other_age[self.lang][0]:
            self.min_age, self.max_age = int(self.age) - 5, int(self.age) + 5

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            self.is_geo = get_something('long', self.id)[0]
            if self.is_geo is None:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True))
            else:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True),
                           self.user_city[self.lang][1])

            send_message = bot.send_message(message.chat.id, self.bot_city[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.six_anket)
        elif text == self.user_other_age[self.lang][1]:
            self.min_age = self.max_age = 'old'

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            self.is_geo = get_something('long', self.id)[0]
            if self.is_geo is None:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True))
            else:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True),
                           self.user_city[self.lang][1])

            send_message = bot.send_message(message.chat.id, self.bot_city[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.six_anket)
        else:
            if errors(message, func=self.five_anket):
                send_message = bot.send_message(message.chat.id, self.bot_other_age_error[self.lang])
                bot.register_next_step_handler(send_message, self.five_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–º–µ–Ω–∏
    def six_anket(self, message):
        text = message.text

        if message.location is not None:
            location = message.location

            self.long = location.longitude
            self.lat = location.latitude

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            old_name = get_something('name', self.id)[0]

            if old_name is not None and old_name != message.from_user.first_name:
                markup.add(old_name)
            markup.add(message.from_user.first_name)

            send_message = bot.send_message(message.chat.id, self.bot_name[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.seven_anket)
        elif text == self.user_city[self.lang][-1]:
            if self.is_geo is not None:
                self.long = 'old'
                self.lat = 'old'

                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

                old_name = get_something('name', self.id)[0]
                if old_name is not None and old_name != message.from_user.first_name:
                    markup.add(old_name)

                markup.add(message.from_user.first_name)

                send_message = bot.send_message(message.chat.id, self.bot_name[self.lang],
                                                reply_markup=markup)
                bot.register_next_step_handler(send_message, self.seven_anket)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_city_error_none[self.lang])
                bot.register_next_step_handler(send_message, self.six_anket)
        else:
            if errors(message, func=self.six_anket):
                geolocator = Nominatim(user_agent=random_str())
                location_address = geolocator.geocode(text, language=message.from_user.language_code)
                if location_address is None:
                    send_message = bot.send_message(message.chat.id, self.bot_city_error[self.lang])
                    bot.register_next_step_handler(send_message, self.six_anket)
                else:
                    self.long = location_address.longitude
                    self.lat = location_address.latitude

                    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                    markup.add(*self.user_city_show_adress[self.lang])

                    send_message = bot.send_message(message.chat.id,
                                                    self.bot_city_show_adress[self.lang] + location_address.address,
                                                    reply_markup=markup)
                    bot.register_next_step_handler(send_message, self.show_adress_if_text)

    # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏—à—å –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å–≤–æ–π –∞–¥—Ä–µ—Å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–Ω–æ –ª–∏ –±–æ—Ç –Ω–∞—à—ë–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    def show_adress_if_text(self, message):
        text = message.text

        if text == self.user_city_show_adress[self.lang][0]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            old_name = get_something('name', self.id)[0]

            if old_name is not None and old_name != message.from_user.first_name:
                markup.add(old_name)
            markup.add(message.from_user.first_name)

            send_message = bot.send_message(message.chat.id, self.bot_name[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.seven_anket)
        elif text == self.user_city_show_adress[self.lang][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            self.is_geo = get_something('long', self.id)[0]
            if self.is_geo is None:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True))
            else:
                markup.add(KeyboardButton(self.user_city[self.lang][0], request_location=True),
                           self.user_city[self.lang][1])

            send_message = bot.send_message(message.chat.id, self.bot_city[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.six_anket)
        else:
            if errors(message, func=self.show_adress_if_text):
                send_message = bot.send_message(message.chat.id, self.bot_city_show_adress_error[self.lang])
                bot.register_next_step_handler(send_message, self.show_adress_if_text)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–∞
    def seven_anket(self, message):
        text = message.text

        if text is not None:
            if len(text) < 50 and text not in ['/start', '/myprofile', '/language', '/complaint']:
                self.name = text

                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

                if get_something('instagram', self.id)[0] is None:
                    markup.add(self.user_instagram[self.lang][0])
                else:
                    markup.add(*self.user_instagram[self.lang])

                send_message = bot.send_message(message.chat.id, self.bot_instagram[self.lang],
                                                reply_markup=markup)
                bot.register_next_step_handler(send_message, self.eight_anket)
            else:
                if errors(message, func=self.seven_anket):
                    send_message = bot.send_message(message.chat.id, self.bot_name_error[self.lang])
                    bot.register_next_step_handler(send_message, self.seven_anket)
        else:
            send_message = bot.send_message(message.chat.id, self.bot_name_error[self.lang])
            bot.register_next_step_handler(send_message, self.seven_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    def eight_anket(self, message):
        text = message.text

        if text == self.user_instagram[self.lang][0]:
            self.instagram = None

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            if get_something('description', self.id)[0] is None:
                markup.add(self.user_descpription[self.lang][0])
            else:
                markup.add(*self.user_descpription[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_descpription[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.nine_anket)
        elif text == self.user_instagram[self.lang][1]:
            self.instagram = 'old'

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            if get_something('description', self.id)[0] is None:
                markup.add(self.user_descpription[self.lang][0])
            else:
                markup.add(*self.user_descpription[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_descpription[self.lang],
                                            reply_markup=markup)
            bot.register_next_step_handler(send_message, self.nine_anket)
        elif text not in ['/start', '/myprofile', '/language', '/complaint']:
            if text.startswith('@'):
                link = 'https://www.instagram.com/' + text[1:]
            else:
                link = text[:]

            if 'www.instagram.com' in link:
                self.instagram = link

                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

                if get_something('description', self.id)[0] is None:
                    markup.add(self.user_descpription[self.lang][0])
                else:
                    markup.add(*self.user_descpription[self.lang])

                send_message = bot.send_message(message.chat.id, self.bot_descpription[self.lang],
                                                reply_markup=markup)
                bot.register_next_step_handler(send_message, self.nine_anket)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_instagram_error[self.lang])
                bot.register_next_step_handler(send_message, self.eight_anket)

        else:
            if errors(message, func=self.eight_anket):
                send_message = bot.send_message(message.chat.id, self.bot_name_error[self.lang])
                bot.register_next_step_handler(send_message, self.eight_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    def nine_anket(self, message):
        text = message.text

        if text and text not in ['/start', '/myprofile', '/language', '/complaint']:
            if text == self.user_descpription[self.lang][0]:
                self.description = None
            elif text == self.user_descpription[self.lang][1]:
                self.description = 'old'
            else:
                self.description = text

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

            self.is_photo = get_something('photo1', self.id)[0]
            self.is_video = get_something('video', self.id)[0]

            if self.is_photo is None:
                markup.add(self.user_photo[self.lang][0])
            else:
                markup.add(*self.user_photo[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_photo[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.ten_anket)
        else:
            if errors(message, func=self.nine_anket):
                send_message = bot.send_message(message.chat.id, self.bot_descpription_error[self.lang])
                bot.register_next_step_handler(send_message, self.nine_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def ten_anket(self, message):
        video = message.video
        photo = message.photo
        text = message.text

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–º —Ñ–æ—Ç–æ
        if photo is not None:
            self.count_photo += 1

            # –ø–æ–ª—É—á–∞–µ–º file_id
            exec(f'self.photo{self.count_photo} = photo[-1].file_id')
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–º —Ç—Ä–∏ —Ñ–æ—Ç–æ
            if self.count_photo < 3:
                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                if self.edit:
                    markup.add(*self.user_edit[self.lang])
                markup.add(*self.user_photo_mane[self.lang])
                send_message = bot.send_message(message.chat.id,
                                                self.bot_photo_mane[self.lang].replace('#', str(self.count_photo)),
                                                reply_markup=markup)
                bot.register_next_step_handler(send_message, self.ten_anket)
            else:
                try:
                    # –µ—Å–ª–∏ –º—ã –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞
                    lock.acquire(True)
                    c.execute(
                        f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, photo1 = ?, photo2 = ?, photo3 = ?, video=NULL, reg = ? WHERE id_tg = ?',
                        (self.age, self.male, self.love, self.name, self.photo1, self.photo2, self.photo3, True,
                         self.id))
                    db.commit()

                    self.add_description_or_city()
                except AttributeError:
                    # –µ—Å–ª–∏ –º—ã –∏–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
                    c.execute(
                        f'UPDATE users SET photo1 = ?, photo2 = ?, photo3 = ?, video = NULL WHERE id_tg = ?',
                        (self.photo1, self.photo2, self.photo3, self.id))
                    db.commit()
                finally:
                    lock.release()

                MyAnket().one_my_anket(message, self.do)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞–º –≤–∏–¥–µ–æ
        elif video is not None:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–∞–º –≤–∏–¥–µ–æ –∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∞–º —Ñ–æ—Ç–æ
            if self.photo1 is None:
                # –ø–æ–ª—É—á–∞–µ–º file_id
                save_video = video.file_id
                try:
                    # –µ—Å–ª–∏ –º—ã –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞
                    lock.acquire(True)
                    c.execute(
                        f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, photo1 = NULL, photo2 = NULL, photo3 = NULL, video = ?, reg = ? WHERE id_tg = ?',
                        (self.age, self.male, self.love, self.name, save_video, True, self.id))
                    db.commit()

                    self.add_description_or_city()
                except AttributeError:
                    # –µ—Å–ª–∏ –º—ã –∏–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
                    c.execute(
                        f'UPDATE users SET photo1 = NULL, photo2 = NULL, photo3 = NULL, video = ? WHERE id_tg = ?',
                        (save_video, self.id))
                    db.commit()
                finally:
                    lock.release()
            # –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –Ω–∞–º —Ñ–æ—Ç–æ –∏ –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
            else:
                try:
                    lock.acquire(True)

                    c.execute(
                        f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, photo1 = ?, photo2 = ?, photo3 = ?, video=NULL, reg = ? WHERE id_tg = ?',
                        (self.age, self.male, self.love, self.name, self.photo1, self.photo2, self.photo3, True,
                         self.id))
                    db.commit()

                    self.add_description_or_city()
                except AttributeError:
                    c.execute(
                        f'UPDATE users SET photo1 = ?, photo2 = ?, photo3 = ?, video = NULL WHERE id_tg = ?',
                        (self.photo1, self.photo2, self.photo3, self.id))
                    db.commit()
                finally:
                    lock.release()

            MyAnket().one_my_anket(message, self.do)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∞—Ç—å —Å –∞–≤–∞—Ç–∞—Ä–∫–∏
        elif text == self.user_photo[self.lang][0]:
            try:
                save_photo = bot.get_user_profile_photos(self.id).photos[0][-1].file_id

                try:
                    lock.acquire(True)

                    c.execute(
                        f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, photo1 = ?, photo2 = NULL, photo3 = NULL, video=NULL, reg = ? WHERE id_tg = ?',
                        (self.age, self.male, self.love, self.name, save_photo, True, self.id))
                    db.commit()

                    self.add_description_or_city()
                finally:
                    lock.release()

                MyAnket().one_my_anket(message, self.do)
            except IndexError:
                send_message = bot.send_message(message.chat.id, self.bot_photo_avatar_error[self.lang])
                bot.register_next_step_handler(send_message, self.ten_anket)

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ
        elif text == self.user_photo[self.lang][1]:
            if self.is_photo is not None or self.is_video is not None:
                try:
                    lock.acquire(True)
                    c.execute(
                        f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, reg = ? WHERE id_tg = ?',
                        (self.age, self.male, self.love, self.name, True, self.id))
                    db.commit()

                    self.add_description_or_city()
                finally:
                    lock.release()

                MyAnket().one_my_anket(message, self.do)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_photo_error_none[self.lang])
                bot.register_next_step_handler(send_message, self.ten_anket)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
        elif text == self.user_edit[self.lang][0]:
            MyAnket().one_my_anket(message, self.do)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–≠—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ'
        elif text == self.user_photo_mane[self.lang][0]:
            try:
                lock.acquire(True)

                c.execute(
                    f'UPDATE users SET age = ?, male = ?, love = ?, name = ?, photo1 = ?, photo2 = ?, photo3 = ?, video=NULL, reg = ? WHERE id_tg = ?',
                    (self.age, self.male, self.love, self.name, self.photo1, self.photo2, self.photo3, True, self.id))
                db.commit()

                self.add_description_or_city()
            except AttributeError:
                c.execute(
                    f'UPDATE users SET photo1 = ?, photo2 = ?, photo3 = ?, video = NULL WHERE id_tg = ?',
                    (self.photo1, self.photo2, self.photo3, self.id))
                db.commit()
            finally:
                lock.release()

            MyAnket().one_my_anket(message, self.do)
        else:
            if errors(message, func=self.ten_anket):
                send_message = bot.send_message(message.chat.id, self.bot_photo_error[self.lang])
                bot.register_next_step_handler(send_message, self.ten_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë —É–∫–∞–∑–∞–ª–∏
    def add_description_or_city(self):
        if self.long != 'old':
            c.execute(
                f'UPDATE users SET long = ?, lat = ? WHERE id_tg = ?',
                (self.long, self.lat, self.id))
            db.commit()

        if self.description != 'old':
            c.execute(
                f'UPDATE users SET description = ? WHERE id_tg = ?',
                (self.description, self.id))
            db.commit()

        if self.instagram != 'old':
            c.execute(
                f'UPDATE users SET instagram = ? WHERE id_tg = ?',
                (self.instagram, self.id))
            db.commit()

        if self.max_age != 'old' and self.min_age != 'old':
            c.execute(
                f'UPDATE users SET min_age = ?, max_age = ? WHERE id_tg = ?',
                (self.min_age, self.max_age, self.id))
            db.commit()

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    def edit_photo(self, message):
        self.count_photo = 0
        self.do = 'command'
        self.lang = get_something('lang', message.from_user.id)[0]
        self.photo1 = None
        self.photo2 = None
        self.photo3 = None
        self.edit = True
        self.id = message.from_user.id

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*self.user_edit[self.lang])
        send_message = bot.send_message(message.chat.id, self.bot_edit_photo[self.lang], reply_markup=markup)
        bot.register_next_step_handler(send_message, self.ten_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –û–Ω–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    def edit_description_one(self, message):
        self.lang = get_something('lang', message.from_user.id)[0]
        self.do = 'command'
        self.id = message.from_user.id

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*self.user_edit[self.lang])
        send_message = bot.send_message(message.chat.id, self.bot_descpription[self.lang],
                                        reply_markup=markup)
        bot.register_next_step_handler(send_message, self.edit_description_two)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ. –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    def edit_description_two(self, message):
        text = message.text

        if text in self.user_edit[self.lang]:
            MyAnket().one_my_anket(message, 'command')
        elif text and text not in ['/start', '/complaint', '/myprofile', '/language']:
            try:
                lock.acquire(True)
                c.execute(
                    f'UPDATE users SET description = ? WHERE id_tg = ?',
                    (text, self.id))
                db.commit()
            finally:
                lock.release()

            MyAnket().one_my_anket(message, 'command')
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_descpription_error[self.lang])
                bot.register_next_step_handler(send_message, self.edit_description_two)


# –∫–ª–∞—Å—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class MyAnket:
    def __init__(self):
        self.bot_your_anket = {'ru': '–¢–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:', 'uk': '–¢–∞–∫ –≤–∏–≥–ª—è–¥–∞—î —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:',
                               'en': 'Your profile:',
                               'id': 'Begini rupa seni profil anda:'}
        self.bot_command = {
            'ru': '1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.\n2. –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.\n3. –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã.\n4. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.',
            'uk': '1. –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É –Ω–∞–Ω–æ–≤–æ.\n2. –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ.\n3. –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç–∏.\n4. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏.',
            'en': '1. Edit my profile.\n2. Change my photo/video.\n3. Change profile text.\n4. View profiles.',
            'id': '1. Isi profil sekali lagi.\n2. Ubah foto/video.\n3. Ubah teks dari profil.\n4. Lihat profil.'}
        self.bot_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                          'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}
        self.bot_quest = {"ru": '–í—Å—ë –≤–µ—Ä–Ω–æ?', 'uk': '–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', 'en': 'Correct?', 'id': 'Apa itu benar?'}

        self.user_command = {'all': ['1', '2', '3', '4 üöÄ']}
        self.user_quest = {'ru': ['–î–∞', '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'], 'uk': ['–¢–∞–∫', '–ó–º—ñ–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É'],
                           'en': ['Yes', 'Edit my profile'], 'id': ['Ya', 'Ubah profil']}

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É, –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω—è–ª –µ—ë —Å –Ω–∞—á–∞–ª–∞, —Ç–æ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, –∞ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ –º–µ–Ω—é—à–∫—É.
    def one_my_anket(self, message, do):
        self.lang = get_something('lang', message.from_user.id)[0]
        self.id = message.from_user.id

        bot.send_message(message.chat.id, self.bot_your_anket[self.lang], reply_markup=ReplyKeyboardRemove())

        send_anket(message, self.id, my_anket=True)
        # –µ—Å–ª–∏ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞
        if do == 'quest':
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(*self.user_quest[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_quest[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.two_quest_my_anket)
        # –∏–Ω–∞—á–µ
        elif do == 'command':
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
            markup.add(*self.user_command['all'])

            send_message = bot.send_message(message.chat.id, self.bot_command[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.three_command_my_anket)

            # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–±—è –∏–ª–∏ –Ω–µ—Ç
            exec(f'global run{self.id}\nrun{self.id}=message')

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –¥–∞, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç, –∞ –∏–Ω—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é—à–∫–æ–π.
    def two_quest_my_anket(self, message):
        text = message.text

        if text == self.user_quest[self.lang][0]:
            ViewsAnket().start(message)
        elif text == self.user_quest[self.lang][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
            markup.add(*self.user_command['all'])

            send_message = bot.send_message(message.chat.id, self.bot_command[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.three_command_my_anket)

            # –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, –ª–∞–∫–Ω—É–ª–∏ –ª–∏ —Ç–µ–±—è –∏–ª–∏ –Ω–µ—Ç
            exec(f'global run{self.id}\nrun{self.id}=message')
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_quest_my_anket)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é—à–∫–µ
    def three_command_my_anket(self, message):
        # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–≥–æ, –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–±—è –∏–ª–∏ –Ω–µ—Ç
        exec(f'global run{self.id}\nrun{self.id}=None')

        text = message.text

        if text == self.user_command['all'][0]:
            Anket().one_anket(message)
        elif text == self.user_command['all'][1]:
            Anket().edit_photo(message)
        elif text == self.user_command['all'][2]:
            Anket().edit_description_one(message)
        elif text == self.user_command['all'][3]:
            ViewsAnket().start(message)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.three_command_my_anket)


# –∫–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∞–Ω–∫–µ—Ç—ã
class ViewsAnket:
    def __init__(self):
        self.bot_find = {'all': '‚ú®üîç'}
        self.bot_phone = {
            'ru': '–£ –≤–∞—Å –Ω–µ—Ç username. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∏ –ª–∞–π–∫–∏ —É–≤–∏–¥–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ username.',
            'uk': '–£ –≤–∞—Å –Ω–µ–º–∞—î username. –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, —â–æ–± –≤–∞—à—ñ –ª–∞–π–∫–∏ –ø–æ–±–∞—á–∏–ª–∏, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–º–µ—Ä –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å username.',
            'en': 'You don\'t have a username. If you want your likes to be seen, send a number or create a username.',
            'id': 'Anda tidak memiliki nama pengguna. Jika Anda ingin suka dilihat, kirim nomor atau buat nama pengguna.'}
        self.bot_phone_error = {'ru': '–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', 'uk': '–í–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!',
                                'en': 'You didn\'t create a username!', 'id': 'Anda tidak membuat nama pengguna!'}
        self.bot_empty = {'ru': '–£–ø—Å... –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã —Å –Ω–∞—á–∞–ª–∞',
                          'uk': '–£–ø—Å... –ê–Ω–∫–µ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –ø–æ—á–∞—Ç–∏ –¥–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É',
                          'en': 'Oops... Profiles are over. Click on the button to start looking at the profiles from the beginning',
                          'id': 'UPS... Profil sudah berakhir. Klik tombol untuk mulai melihat kuesioner dari awal'}
        self.bot_find_anket = {'ru': '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ—ë –ø–æ ID?',
                               'uk': '–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏ –∞–±–æ –∑–Ω–∞–π—Ç–∏ —ó—ó –ø–æ ID?', 'en': 'View profiles or find it by ID?',
                               'id': 'Lihat profil atau menemukannya dengan ID?'}
        self.bot_find_id = {'ru': '–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'uk': '–ù–∞–¥—ñ—à–ª—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
                            'en': 'Send the user ID', 'id': 'Kirim ID pengguna'}
        self.bot_find_id_error = {'ru': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ!',
                                  'uk': '–ù–µ–¥—ñ–π—Å–Ω–∏–π ID. –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞–Ω–æ–≤–æ!', 'en': 'Invalid ID. Send it again!',
                                  'id': 'ID tidak valid. Kirim lagi!'}
        self.bot_find_id_you_error = {'ru': '–ù–µ–ª—å–∑—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–≤–æ–π ID', 'uk': '–ù–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–≤—ñ–π ID',
                                      'en': 'You cannot send your ID', 'id': 'Anda tidak dapat mengirim ID anda'}
        self.bot_send = {
            'ru': '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (–¥–æ 15 —Å–µ–∫)',
            'uk': '–ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ –∞–±–æ –∑–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ (–¥–æ 15 —Å–µ–∫)',
            'en': 'Write a message for this user, send a photo or record a short video (up to 15 seconds)',
            'id': 'Tulis pesan untuk pengguna ini, kirim foto atau rekam video pendek (hingga 15 detik)'}
        self.bot_send_error = {'ru': '–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–∏–¥–µ–æ. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.',
                               'uk': '–ú–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–∏—à–µ —Ç–µ–∫—Å—Ç –∞–±–æ –≤—ñ–¥–µ–æ. –ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É.',
                               'en': 'Only text or video can be sent. Re-enter, please.',
                               'id': 'Hanya teks atau video yang boleh dihantar. Masukkan semula mesej anda.'}
        self.after_send = {'ru': '–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞.', 'uk': '–õ–∞–π–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, —á–µ–∫–∞—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.',
                           'en': 'Like sent, waiting for a response.', 'id': 'Suka dihantar, menunggu jawapan.'}
        self.bot_true_complaint = {'ru': '–ñ–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                                   'uk': '–°–∫–∞—Ä–≥–∞ –±—É–¥–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
                                   'en': 'Your complaint will be processed soon.', 'id': 'Aduan kemudiannya diproses.'}
        self.bot_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                          'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

        self.user_phone = {'ru': ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', '–Ø —Å–æ–∑–¥–∞–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
                           'uk': ['–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω', '–Ø —Å—Ç–≤–æ—Ä–∏–≤ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'],
                           'en': ['Send phone', 'I created a username'],
                           'id': ['Kirim telepon', 'Saya telah membuat nama pengguna']}
        self.user_find_anket = {'ru': ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', '–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –ø–æ ID'],
                                'uk': ['–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏', '–ó–Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –ø–æ ID'],
                                'en': ['View profiles', 'Find profile by ID'],
                                'id': ['Lihat profil', 'Cari profil dengan ID']}
        self.user_find_id = {'ru': ['–û—Ç–º–µ–Ω–∞'], 'uk': ['–°–∫–∞—Å—É–≤–∞–Ω–Ω—è'], 'en': ['Cancel'], 'id': ['Batal']}
        self.user_rate = {'all': ['‚ù§', 'üíå / üìπ', 'üëé', 'üí§']}
        self.user_send = {'ru': ['–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'], 'uk': ['–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥'], 'en': ['Go back'], 'id': ['Kembali']}
        self.user_empty = {'ru': ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã —Å –Ω–∞—á–∞–ª–∞'], 'uk': ['–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É'],
                           'en': ['View profiles from the beginning'],
                           'id': ['Lihat profil dari awal']}

        self.server_in_complaint = ['1üîû', '2üíä', '3üí∞', '4ü¶®', '9']
        self.server_complaint = {'1üîû': 'üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', '2üíä': ' üíä–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤',
                                 '3üí∞': 'üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥', '4ü¶®': 'ü¶® –î—Ä—É–≥–æ–µ'}

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –≤ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç–∞ –∞–Ω–∫–µ—Ç
    def start(self, message):
        self.id = message.from_user.id
        self.lang = get_something('lang', message.from_user.id)[0]
        self.username = message.from_user.username
        self.user_anket = None

        self.user_love, self.user_age, self.user_long, self.user_lat, self.user_lang_code, self.user_index, self.user_male, self.phone, self.firstname, self.min_age, self.max_age = get_something(
            'love, age, long, lat, lang_code, ind, male, phone, name, min_age, max_age', self.id)

        # –ø–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –Ω–∞—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            lock.acquire(True)

            if self.user_love == 'n':
                c.execute(
                    'SELECT id_tg FROM users WHERE (age BETWEEN ? AND ?) AND ((long BETWEEN ? AND ?) AND (lat BETWEEN ? and ?)) AND lang_code = ? AND id_tg <> ? AND is_search = 1',
                    (self.min_age, self.max_age,
                     self.user_long - 1 / ((math.cos(53.85 * math.pi / 180) * 40000 / 360) / 20),
                     self.user_long + 1 / ((math.cos(53.85 * math.pi / 180) * 40000 / 360) / 20),
                     self.user_lat - 0.2702702702702703, self.user_lat + 0.2702702702702703, self.user_lang_code,
                     self.id))
            else:
                c.execute(
                    'SELECT id_tg FROM users WHERE male = ? AND (age BETWEEN ? AND ?) AND ((long BETWEEN ? AND ?) AND (lat BETWEEN ? and ?)) AND lang_code = ? AND id_tg <> ? AND is_search = 1',
                    (self.user_love, self.user_age - 5, self.user_age + 5,
                     self.user_long - 1 / ((math.cos(53.85 * math.pi / 180) * 40000 / 360) / 20),
                     self.user_long + 1 / ((math.cos(53.85 * math.pi / 180) * 40000 / 360) / 20),
                     self.user_lat - 0.2702702702702703, self.user_lat + 0.2702702702702703, self.user_lang_code,
                     self.id))

            self.ankets_id = c.fetchall()
        finally:
            lock.release()

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
        self.ankets_id.sort(key=to_sort, reverse=True)

        # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username, –∏ –æ–Ω –Ω–µ –¥–∞–≤–∞–ª –Ω–∞–º –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
        if self.username is None and self.phone is None:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(KeyboardButton(self.user_phone[self.lang][0], request_contact=True),
                       KeyboardButton(self.user_phone[self.lang][1]))
            send_message = bot.send_message(message.chat.id, self.bot_phone[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.add_phone)
        # –∏ –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç
        else:
            # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
            if self.ankets_id:
                bot.send_message(message.chat.id, self.bot_find['all'], reply_markup=ReplyKeyboardRemove())
                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                markup.add(*self.user_find_anket[self.lang])

                send_message = bot.send_message(message.chat.id, self.bot_find_anket[self.lang], reply_markup=markup)
                bot.register_next_step_handler(send_message, self.find_anket)
            else:
                bot.send_message(message.chat.id, self.bot_empty[self.lang], reply_markup=ReplyKeyboardRemove())
                MyAnket().one_my_anket(message, 'command')

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username, –∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª
    def add_phone(self, message):
        text = message.text
        contact = message.contact

        if contact:
            try:
                lock.acquire(True)

                c.execute('UPDATE users SET phone = ? WHERE id_tg = ?',
                          (contact.phone_number, contact.user_id))
                db.commit()
            finally:
                lock.release()

            self.phone = contact.phone_number

            bot.send_message(message.chat.id, self.bot_find['all'])

            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            markup.add(*self.user_find_anket[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_find_anket[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.find_anket)
        elif text == self.user_phone[self.lang][1]:
            if message.from_user.username:
                self.username = message.from_user.username

                bot.send_message(message.chat.id, self.bot_find['all'])

                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                markup.add(*self.user_find_anket[self.lang])

                send_message = bot.send_message(message.chat.id, self.bot_find_anket[self.lang], reply_markup=markup)
                bot.register_next_step_handler(send_message, self.find_anket)
            else:
                send_message = bot.send_message(message.chat.id, self.bot_phone_error[self.lang])
                bot.register_next_step_handler(send_message, self.add_phone)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.add_phone)

    def find_anket(self, message):
        text = message.text

        if text == self.user_find_anket[self.lang][0]:
            self.get_anket(message)
        elif text == self.user_find_anket[self.lang][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_find_id[self.lang])

            send_messsage = bot.send_message(message.chat.id, self.bot_find_id[self.lang],
                                             reply_markup=markup)
            bot.register_next_step_handler(send_messsage, self.get_anket_id)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.add_phone)

    def get_anket_id(self, message):
        text = message.text

        if text == str(message.from_user.id):
            send_message = bot.send_message(message.chat.id, self.bot_find_id_you_error[self.lang])
            bot.register_next_step_handler(send_message, self.get_anket_id)
        else:
            if text in self.user_find_id[self.lang]:
                self.get_anket(message)
            elif text in ['/myprofile', '/complaint', '/start', '/language']:
                errors(message)
            else:
                self.user_anket = get_something('id_tg', text)
                if self.user_anket is None:
                    send_message = bot.send_message(message.chat.id, self.bot_find_id_error[self.lang])
                    bot.register_next_step_handler(send_message, self.get_anket_id)
                else:
                    self.user_anket = self.user_anket[0]
                    self.get_anket(message)

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É
    def get_anket(self, message):
        if self.user_index >= len(self.ankets_id):
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_empty[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_empty[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.reset_index)

            exec(f'global run{self.id}\nrun{self.id}=message')
        else:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
            markup.add(*self.user_rate['all'])
            if self.user_anket:
                send_message = send_anket(message, self.user_anket, markup)
            else:
                send_message = send_anket(message, self.ankets_id[self.user_index][0], markup)
            bot.register_next_step_handler(send_message, self.rate)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –∞–Ω–∫–µ—Ç–µ (–ª–∞–π–∫, –¥–∏–∑–ª–∞–π–∫ –∏ —Ç.–¥)
    def rate(self, message):
        text = message.text

        if text == self.user_rate['all'][0]:
            try:
                lock.acquire(True)

                if self.user_anket:
                    if self.username:
                        c.execute('INSERT INTO love(from_user, to_user, from_username, from_male) VALUES(?, ?, ?, ?)',
                                  (self.id, self.user_anket, self.username, self.user_male))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.user_male, self.phone,
                             self.firstname))
                        db.commit()

                    self.user_anket = None
                else:
                    if self.username:
                        c.execute('INSERT INTO love(from_user, to_user, from_username, from_male) VALUES(?, ?, ?, ?)',
                                  (self.id, self.ankets_id[self.user_index][0], self.username, self.user_male))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.user_male, self.phone,
                             self.firstname))
                        db.commit()
                    self.user_index += 1
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
            finally:
                lock.release()

            self.get_anket(message)
        elif text == self.user_rate['all'][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_send[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_send[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.send_text_or_video)
        elif text == self.user_rate['all'][2]:
            if self.user_anket:
                self.user_anket = None
            else:
                self.user_index += 1
                try:
                    lock.acquire(True)
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
                finally:
                    lock.release()

            self.get_anket(message)
        elif text == self.user_rate['all'][3]:
            Menu().one_menu1(message)
        else:
            if errors(message, self):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.rate)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ
    def send_text_or_video(self, message):
        text = message.text
        video = message.video
        photo = message.photo

        if text == self.user_send[self.lang][0]:
            if errors(message):
                self.get_anket(message)
        elif video:
            save_video = video.file_id

            try:
                lock.acquire(True)

                if self.user_anket:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, video) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.user_male, self.phone,
                             self.firstname, save_video))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, video) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.username, self.user_male, save_video))
                        db.commit()

                    self.user_anket = None
                else:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, video) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.user_male, self.phone,
                             self.firstname, save_video))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, video) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.username, self.user_male, save_video))
                        db.commit()

                    self.user_index += 1
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
            finally:
                lock.release()

            bot.send_message(message.chat.id, self.after_send[self.lang])
            self.get_anket(message)
        elif text:
            try:
                lock.acquire()

                if self.user_anket:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, text) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.user_male, self.phone,
                             self.firstname, text))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, text) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.username, self.user_male, text))
                        db.commit()

                    self.user_anket = None
                else:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, text) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.user_male, self.phone,
                             self.firstname, text))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, text) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.username, self.user_male, text))
                        db.commit()

                    self.user_index += 1
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
            finally:
                lock.release()

            bot.send_message(message.chat.id, self.after_send[self.lang])
            self.get_anket(message)
        elif photo:
            save_photo = photo[-1].file_id

            try:
                lock.acquire(True)

                if self.user_anket:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, photo) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.user_male, self.phone,
                             self.firstname, save_photo))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, [photo]) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.user_anket, self.username, self.user_male, save_photo))
                        db.commit()

                    self.user_anket = None
                else:
                    if self.phone:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_male, from_phone, from_first_name, photo) VALUES(?, ?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.user_male, self.phone,
                             self.firstname, save_photo))
                        db.commit()
                    else:
                        c.execute(
                            'INSERT INTO love(from_user, to_user, from_username, from_male, [photo]) VALUES(?, ?, ?, ?, ?)',
                            (self.id, self.ankets_id[self.user_index][0], self.username, self.user_male, save_photo))
                        db.commit()

                    self.user_index += 1
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
            finally:
                lock.release()

            bot.send_message(message.chat.id, self.after_send[self.lang])
            self.get_anket(message)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_send_error[self.lang])
                bot.register_next_step_handler(send_message, self.send_text_or_video)

    # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã —Å–Ω–∞—á–∞–ª–∞
    def reset_index(self, message):
        exec(f'global run{self.id}\nrun{self.id}=None')

        text = message.text

        if text in self.user_empty[self.lang]:
            try:
                lock.acquire()

                self.user_index = 0
                c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                db.commit()
            finally:
                lock.release()

            self.get_anket(message)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.reset_index)

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É /complaint
    def complaint(self, message):
        text = message.text

        if text in self.server_in_complaint:
            if text != '9':
                bot.send_message(message.chat.id, self.bot_true_complaint[self.lang])

                try:
                    lock.acquire(True)

                    c.execute('INSERT INTO complaint(from_user, to_user, type) VALUES(?, ?, ?)',
                              (self.id, self.ankets_id[self.user_index][0], self.server_complaint[text]))
                    db.commit()

                    self.user_index += 1
                    c.execute('UPDATE users SET ind = ? WHERE id_tg = ?', (self.user_index, self.id))
                    db.commit()
                finally:
                    lock.release()

            self.get_anket(message)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.complaint)


# –∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—Ç–æ—Ä—É—é –º–µ–Ω—é—à–∫—É
class Menu:
    def __init__(self):
        self.bot_menu1 = {'ru': '–ü–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É',
                          'uk': '–ü–æ—á–µ–∫–∞–π –ø–æ–∫–∏ —Ö—Ç–æ—Å—å –ø–æ–±–∞—á–∏—Ç—å —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É', 'en': 'Wait until someone sees you.',
                          'id': 'Mari tunggu sehingga seseorang melihat profil anda'}
        self.bot_menu2 = {
            'ru': '1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.\n***\n4. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π - –ø–æ–ª—É—á–∏ –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤ üòé.',
            'uk': '1. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω—ñ–∫–æ–≥–æ —à—É–∫–∞—Ç–∏.\n***\n4. –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ - –æ—Ç—Ä–∏–º–∞–π –±—ñ–ª—å—à–µ –ª–∞–π–∫—ñ–≤ üòé.',
            'en': '1. View profiles.\n2. My profile.\n3. Not searching anymore.\n***\n4. Invite friends to get more likes üòé.',
            'id': '1. Lihat profil.\n2. Profil aku.\n3. Aku tak mahu lagi cari seseorang.\n***\n4. Jemput kawan-kawan - bawa lebih banyak like üòé.'}
        self.bot_sleep = {
            'ru': '–¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n1. –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n2. –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.',
            'uk': '–¢–∞–∫ —Ç–∏ –Ω–µ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ –∫–æ–º—É—Å—å –ø–æ–¥–æ–±–∞—î—à—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n1. –¢–∞–∫, –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É.\n2. –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥.',
            'en': 'You won\'t know who likes you then... Sure about deactivating?\n1. Yes, deactivate my profile please.\n2. No, I want to see my matches.',
            'id': 'Dengan ini anda tidak akan mengetahui bahawa seseorang menyukai anda... Adakah anda pasti mahu nyahaktifkan profil anda?\n\n1. Ya, nyahaktifkan profil.\n2. Tak, kembali.'}
        self.bot_wait_anket = {
            'ru': '–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞—à–µ–ª –∫–æ–≥–æ-—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ! –†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å\n\n1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã',
            'uk': '–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–∏ –∫–æ–≥–æ—Å—å –∑–Ω–∞–π—à–æ–≤ –∑ –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é! \n–†–∞–¥–∏–π –±—É–≤ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, —è–∫—â–æ –±—É–¥–µ –Ω—É–¥–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –∑–Ω–∞–π–¥–µ–º —Ç–æ–±—ñ –∫–æ–≥–æ—Å—å\n\n1. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏',
            'en': 'Hope you met someone with my help!\nAlways happy to chat. If bored, text me -  I\'ll find someone special for you.\n\n1. View profiles',
            'id': 'Aku harap anda menjumpai seseorang kerana aku! Aku gembira dapat bercakap dengan anda, jika ianya akan membosankan - tulis, kita pasti mencarikan anda seseorang\n\n1. Lihat profil'}
        self.bot_boost1 = {
            'ru': '–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–ª—å—à–µ –ª–∞–π–∫–æ–≤!\n\n–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–ü—Ä–∏—à–ª–æ –∑–∞ 14 –¥–Ω–µ–π: ‚Ññ\n–ë–æ–Ω—É—Å –∫ —Å–∏–ª–µ –∞–Ω–∫–µ—Ç—ã: #%\n–ü–µ—Ä–µ—à–ª–∏ –¥—Ä—É–∑—å—è–º –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏ –≤ —Å–≤–æ–∏—Ö —Å–æ—Ü—Å–µ—Ç—è—Ö.\n–í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá',
            'uk': '–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–π –±—ñ–ª—å—à–µ –ª–∞–π–∫—ñ–≤!\n\n–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–ü—Ä–∏–π—à–ª–æ –∑–∞ 14 –¥–Ω—ñ–≤: ‚Ññ\n–ë–æ–Ω—É—Å –¥–æ —Å–∏–ª–∏ –∞–Ω–∫–µ—Ç–∏: #%\n\n–ù–∞–¥—ñ—à–ª–∏ –¥—Ä—É–∑—è–º –∞–±–æ –ø–æ—à–∏—Ä —É —Å–≤–æ—ó—Ö —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö.\n–¢–≤–æ—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è üëá',
            'en': 'Invite friends to get more likes!\n\nMy stats\nJoined in 14 days: ‚Ññ\nA bonus to your profile: #%\n\nShare it with your friends/on your social media!\nYour personal linküëá',
            'id': 'Jemput kawan-kawan dan bawa lebih banyak like!\n\nStatistik awak\nBergabung selama 14 hari: ‚Ññ\nBonus ke kuasa profil: #%\n\nKirim ke kawan atau letak link di social media anda. \nIni lah link peribadi andaüëá'}
        self.bot_boost2 = {'ru': '–ë–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –î–∞–π–≤–∏–Ω—á–∏–∫üç∑ –≤ Telegram! –ù–∞–π–¥–µ—Ç –¥—Ä—É–∑–µ–π –∏–ª–∏ –¥–∞–∂–µ –ø–æ–ª–æ–≤–∏–Ω–∫—É üë´\nüëâ ',
                           'uk': '–ë–æ—Ç –∑–Ω–∞–π–æ–º—Å—Ç–≤ –î–∞–π–≤—ñ–Ω—á–∏–∫üç∑ —É Telegram! –ó–Ω–∞–π–¥–µ –¥—Ä—É–∑—ñ–≤ –∞–±–æ –Ω–∞–≤—ñ—Ç—å –¥—Ä—É–≥—É –ø–æ–ª–æ–≤–∏–Ω–∫—É üë´\nüëâ ',
                           'en': 'Dating Bot ‚Äì Leomatchbotüç∑ is on Telegram! Find new friends or even a lover üë´\nüëâ ',
                           'id': 'Bot temu janji Leomatchbot üç∑di Telegram! Cari kawan atau cinta anda üë´\nüëâ '}
        self.bot_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                          'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

        self.user_menu2 = {'all': ['1 üöÄ', '2', '3', '4']}
        self.user_sleep = {'all': ['1', '2']}
        self.user_wait_anket = {'ru': ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'], 'uk': ['–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏'], 'en': ['View profiles'],
                                'id': ['Lihat profil']}
        self.user_boost = {'ru': ['–ù–∞–∑–∞–¥'], 'uk': ['–ù–∞–∑–∞–¥'], 'en': ['Go back'], 'id': ['Kembali']}

    # —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç '–ü–æ–¥–æ–∂–¥—ë–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–∏—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É'
    def one_menu1(self, message):
        self.lang = get_something('lang', message.from_user.id)[0]
        self.id = message.from_user.id

        bot.send_message(message.chat.id, self.bot_menu1[self.lang], reply_markup=ReplyKeyboardRemove())
        self.one_menu2(message)

    # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∞–º—É –º–µ–Ω—é—à–∫—É
    def one_menu2(self, message):
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        markup.add(*self.user_menu2['all'])

        send_message = bot.send_message(message.chat.id, self.bot_menu2[self.lang], reply_markup=markup)
        bot.register_next_step_handler(send_message, self.two_menu)

        exec(f'global run{self.id}\nrun{self.id}=message')

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ –≤—Ç–æ—Ä–æ–π –º–µ–Ω—é—à–∫–µ
    def two_menu(self, message):
        exec(f'global run{self.id}\nrun{self.id}=None')

        text = message.text

        if text == self.user_menu2['all'][0]:
            ViewsAnket().start(message)
        elif text == self.user_menu2['all'][1]:
            MyAnket().one_my_anket(message, 'command')
        elif text == self.user_menu2['all'][2]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(*self.user_sleep['all'])

            send_message = bot.send_message(message.chat.id, self.bot_sleep[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.sleep_menu)
        elif text == self.user_menu2['all'][3]:
            user_id = get_something('users_id', self.id)[0]

            try:
                lock.acquire(True)

                c.execute('SELECT COUNT(users_id) FROM referrals WHERE users_id = ? GROUP BY users_id',
                          (user_id,))
                count = c.fetchone()
                count = '0' if count is None else str(count[0])

                c.execute(
                    'SELECT COUNT(users_id) FROM referrals WHERE users_id = ? AND date_created > ? GROUP BY users_id',
                    (user_id, datetime.strftime(datetime.now() - timedelta(days=14), '%Y-%m-%d %H:%M:%S')))
                count_14 = c.fetchone()
                count_14 = '0' if count_14 is None else str(count_14[0])
            finally:
                lock.release()

            bot.send_message(message.chat.id,
                             self.bot_boost1[self.lang].replace('#', count).replace('‚Ññ', count_14))

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_boost[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_boost2[
                self.lang] + f'https://t.me/leomatchprogabot?start={self.id}', reply_markup=markup,
                                            disable_web_page_preview=True)
            bot.register_next_step_handler(send_message, self.boost)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_menu)

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    def sleep_menu(self, message):
        text = message.text

        if text == self.user_sleep['all'][0]:
            try:
                lock.acquire(True)

                c.execute('UPDATE users SET is_search = False WHERE id_tg = ?', (self.id,))
                db.commit()
            finally:
                lock.release()

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_wait_anket[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_wait_anket[self.lang],
                                            reply_markup=markup)

            bot.register_next_step_handler(send_message, lambda message: wait_anket(message, 'menu'))
        elif text == self.user_sleep['all'][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_menu2['all'])

            send_message = bot.send_message(message.chat.id, self.bot_menu2[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.two_menu)

            exec(f'global run{self.id}\nrun{self.id}=message')
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.sleep_menu)

    # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é—à–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    def boost(self, message):
        text = message.text

        if text == self.user_boost[self.lang][0]:
            self.one_menu2(message)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.boost)

    # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é one_menu2 . –û–Ω–∞ –Ω—É–∂–Ω–∞ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é, –Ω–æ –Ω–µ –æ—Ç—Å—ã–ª–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - '–ü–û–¥–æ–∂–¥—ë–º –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–µ—Ç —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É'
    def after_something(self, message):
        self.lang = get_something('lang', message.from_user.id)[0]
        self.id = message.from_user.id

        self.one_menu2(message)


# –∫–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª
class Love:
    def __init__(self):
        self.bot_love = {'ru1': '–¢—ã &#? \n1. –ü–æ–∫–∞–∑–∞—Ç—å.\n2. –ù–µ —Ö–æ—á—É –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å.',
                         'ru2': '1. –ü–æ–∫–∞–∑–∞—Ç—å # —è –Ω—Ä–∞–≤–ª—é—Å—å.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å.',
                         'uk1': '–¢–∏ &#? \n1. –ü–æ–∫–∞–∑–∞–≤—à–∏.\n2. –ù–µ —Ö–æ—á—É –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–≥–æ –¥–∏–≤–∏—Ç–∏—Å—è.',
                         'uk2': '1. –ü–æ–∫–∞–∑–∞—Ç–∏ # —è –ø–æ–¥–æ–±–∞—é—Å—è.\n2. –ú–æ—è –∞–Ω–∫–µ—Ç–∞.\n3. –Ø –±—ñ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω—ñ–∫–æ–≥–æ —à—É–∫–∞—Ç–∏.',
                         'en1': '# liked &. Have a look? \n1. Show.\n2. Not searching anymore',
                         'en2': '1. Show # me.\n2. My profile.\n3. I don\'t want to look for anyone else.',
                         'id1': '# menyukai &. Coba lihat? \n1. Tunjukkan.\n2. Tidak mencari lagi',
                         'id2': '1. Tampilkan # yang menyukai saya.\n2. Profil saya.\n3. Saya tidak ingin mencari orang lain.'
                         }
        self.bot_love_user_1 = {'ru': {'w': '–ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å ', 'm': '–ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è '},
                                'uk': {"w": '—Å–ø–æ–¥–æ–±–∞–ª–∞—Å—è ', 'm': '—Å–ø–æ–¥–æ–±–∞–≤—Å—è '},
                                'en': {'w': 'you', 'm': 'you'},
                                'id': {'w ': 'Anda', 'm': 'Anda'}}
        self.bot_love_user_2 = {
            'ru1': {'ma': '–ª—é–¥—è–º. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ö?', 'w': '–¥–µ–≤—É—à–∫–µ. –ü–æ–∫–∞–∑–∞—Ç—å –µ—ë?', 'm': '–ø–∞—Ä–Ω—é. –ü–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ?',
                    'wm': '–¥–µ–≤—É—à–∫–∞–º. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ö?', 'mm': '–ø–∞—Ä–Ω—è–º. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ö?'},
            'uk1': {'ma': '–ª—é–¥–∏–Ω–∞. –ü–æ–∫–∞–∑–∞—Ç–∏ —ó—Ö?', 'w': '–¥—ñ–≤—á–∏–Ω–∞. –ü–æ–∫–∞–∑–∞—Ç–∏ —ó—ó?', 'm': '—Ö–ª–æ–ø–µ—Ü—å. –ü–æ–∫–∞–∑–∞—Ç–∏ –π–æ–≥–æ?',
                    'wm': '–¥—ñ–≤—á–∞—Ç–∞–º. –ü–æ–∫–∞–∑–∞—Ç–∏ —ó—Ö?', 'mm': '—Ö–ª–æ–ø—Ü—è–º. –ü–æ–∫–∞–∑–∞—Ç–∏ —ó—Ö?'},
            'en1': {'ma': 'people', 'w': 'woman', 'm': 'man', 'wm': 'women', 'mm': 'men'},
            'id1': {'ma': 'orang ', 'w': 'wanita', 'm': 'pria', 'wm': 'wanita', 'mm': 'pria'},
            'ru2': {"ma": '–ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º', 'w': '–¥–µ–≤—É—à–∫—É, –∫–æ—Ç–æ—Ä–æ–π', 'm': '–ø–∞—Ä–Ω—è, –∫–æ—Ç–æ—Ä–æ–º—É', 'wm': '–¥–µ–≤—É—à–µ–∫, –∫–æ—Ç–æ—Ä—ã–º',
                    'mm': '–ø–∞—Ä–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–º'},
            'uk2': {"ma": '–ª—é–¥–µ–π, —è–∫–∏–º', 'w': '–¥—ñ–≤—á–∏–Ω—É, —è–∫—ñ–π', 'm': '—Ö–ª–æ–ø—Ü—è, —è–∫–æ–º—É', 'wm': '–¥—ñ–≤—á–∞—Ç, —è–∫–∏–º',
                    'mm': '—Ö–ª–æ–ø—Ü—ñ–≤, —è–∫–∏–º'},
            'en2': {'ma': 'people who like', 'w': 'girl who likes', 'm': 'guy who likes', 'wm': 'girls who like',
                    'mm': 'guys who like'},
            'id2': {'ma': 'orang', 'w': 'gadis', 'm': 'pria', 'wm': 'cewek yang suka', 'mm': 'cowok yang suka'}}
        self.bot_link = {'ru': '–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è ;) –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è #',
                         'uk': '–í—ñ–¥–º—ñ–Ω–Ω–æ! –°–ø–æ–¥—ñ–≤–∞—é—Å—è –¥–æ–±—Ä–µ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ —á–∞—Å;) –ø–æ—á–∏–Ω–∞–π —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è #',
                         'en': 'Matched! Start chatting #', 'id': 'Cocok! Mulai chatting #'}
        self.bot_complaint = {
            'ru': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã\n\n1. üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö.\n2. üíä –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤.\n3. üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥.\n4. ü¶® –î—Ä—É–≥–æ–µ.\n***\n9. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.',
            'uk': '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏\n\n1. üîû –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö.\n2. üíä –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫—ñ–≤.\n3. üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –ø–æ—Å–ª—É–≥.\n4. ü¶® –Ü–Ω—à–µ.\n***\n9. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥.',
            'en': 'Specify the reason for the complaint\n\n1. üîû Adult material.\n2. üíä Drug propaganda.\n3. üí∞ Sale of goods and services.\n4. ü¶® Other.\n***\n9. Go back.',
            'id': 'Tentukan alasan pengaduan\n\n1. üîû Bahan dewasa.\n2. üíä Propaganda narkoba.\n3. üí∞ Penjualan barang dan jasa.\n4. ü¶® Lainnya.\n***\n9. Kembali.'}
        self.bot_true_complaint = {'ru': '–ñ–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                                   'uk': '–°–∫–∞—Ä–≥–∞ –±—É–¥–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
                                   'en': 'Your complaint will be processed soon.', 'id': 'Aduan kemudiannya diproses.'}
        self.bot_sleep = {
            'ru': '–¢–∞–∫ —Ç—ã –Ω–µ —É–∑–Ω–∞–µ—à—å, —á—Ç–æ –∫–æ–º—É-—Ç–æ –Ω—Ä–∞–≤–∏—à—å—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n1. –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n2. –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.',
            'uk': '–¢–∞–∫ —Ç–∏ –Ω–µ –¥—ñ–∑–Ω–∞—î—à—Å—è, —â–æ –∫–æ–º—É—Å—å –ø–æ–¥–æ–±–∞—î—à—Å—è... –¢–æ—á–Ω–æ —Ö–æ—á–µ—à –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n1. –¢–∞–∫, –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É.\n2. –ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥.',
            'en': 'You won\'t know who likes you then... Sure about deactivating?\n1. Yes, deactivate my profile please.\n2. No, I want to see my matches.',
            'id': 'Dengan ini anda tidak akan mengetahui bahawa seseorang menyukai anda... Adakah anda pasti mahu nyahaktifkan profil anda?\n\n1. Ya, nyahaktifkan profil.\n2. Tak, kembali.'}
        self.bot_wait_anket = {
            'ru': '–ù–∞–¥–µ—é—Å—å —Ç—ã –Ω–∞—à–µ–ª –∫–æ–≥–æ-—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ! –†–∞–¥ –±—ã–ª —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è, –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º —Ç–µ–±–µ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å\n\n1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã',
            'uk': '–°–ø–æ–¥—ñ–≤–∞—é—Å—å —Ç–∏ –∫–æ–≥–æ—Å—å –∑–Ω–∞–π—à–æ–≤ –∑ –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é! \n–†–∞–¥–∏–π –±—É–≤ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è, —è–∫—â–æ –±—É–¥–µ –Ω—É–¥–Ω–æ ‚Äì –ø–∏—à–∏, –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –∑–Ω–∞–π–¥–µ–º —Ç–æ–±—ñ –∫–æ–≥–æ—Å—å\n\n1. –î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏',
            'en': 'Hope you met someone with my help!\nAlways happy to chat. If bored, text me -  I\'ll find someone special for you.\n\n1. View profiles',
            'id': 'Aku harap anda menjumpai seseorang kerana aku! Aku gembira dapat bercakap dengan anda, jika ianya akan membosankan - tulis, kita pasti mencarikan anda seseorang\n\n1. Lihat profil'}
        self.bot_continue = {'ru': '#, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ üëâ @pythonproga',
                             'uk': '#, –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª —Ç–≤–æ—Ä—Ü—è —Ü—å–æ–≥–æ –±–æ—Ç–∞ üëâ @pythonproga',
                             'en': '#, subscribe to the telegram channel of the creator of this bot üëâ @pythonproga',
                             'id': '# , berlangganan saluran telegram dari pencipta bot ini üëâ @pythonproga'}
        self.bot_text = {'ru': '# –¥–ª—è —Ç–µ–±—è —Ç–µ–∫—Å—Ç:\n\n', 'uk': '# –¥–ª—è —Ç–µ–±–µ —Ç–µ–∫—Å—Ç:\n\n', 'en': '# text for you:\n\n',
                         'id': '# teks untuk Anda:\n\n'}
        self.bot_video = {'ru': '# –¥–ª—è —Ç–µ–±—è –≤–∏–¥–µ–æ üëÜ', 'uk': '# –¥–ª—è —Ç–µ–±–µ –≤—ñ–¥–µ–æ üëÜ', 'en': '# video for you üëÜ',
                          'id': '# video untuk Anda üëÜ'}
        self.bot_photo = {'ru': '# –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ç–æ üëÜ', 'uk': '# –¥–ª—è —Ç–µ–±–µ —Ñ–æ—Ç–æ üëÜ', 'en': '# photo for you üëÜ',
                          'id': '# foto untuk Anda üëÜ'}
        self.bot_send = {'ru': {'w': '–û–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞', 'm': '–û–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª'},
                         'uk': {"w": '–í–æ–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∞', 'm': '–í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–∏–≤'},
                         'en': {'w': 'She sent', 'm': 'He sent'},
                         'id': {'w': 'Dia mengirim', 'm': 'Dia mengirim'}}
        self.bot_error = {'ru': '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞', 'uk': '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                          'en': 'No such option', 'id': 'Tiada jawapan seperti ini'}

        self.user_love = {'all1': ['‚ù§', 'üí§'], 'all2': ['1üöÄ', '2', '3']}
        self.user_anket = {'ru': ['‚ù§', 'üëé', '–∂–∞–ª–æ–±–∞', 'üí§'], 'uk': ['‚ù§', 'üëé', '—Å–∫–∞—Ä–≥–∞', 'üí§'],
                           'en': ['‚ù§', 'üëé', 'complaint', 'üí§'], 'id': ['‚ù§', 'üëé', 'keluhan', 'üí§']}
        self.user_link = {'ru': ['‚ö† –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'], 'uk': ['‚ö† –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è'], 'en': ['‚ö† Complain'],
                          'id': ['‚ö† Mengeluh']}
        self.user_link_complaint = {
            'ru': ['üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', 'üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥', 'üò¥ –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'ü¶® –î—Ä—É–≥–æ–µ', '‚úñ –û—Ç–º–µ–Ω–∞'],
            'uk': ['üîû –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö', 'üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –ø–æ—Å–ª—É–≥', 'üò¥ –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î', 'ü¶® –Ü–Ω—à–µ',
                   '‚úñ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è'],
            'en': ['üîû Adult material', 'üí∞ Sale of goods and services', 'üò¥ Not responding', 'ü¶® Other', '‚úñ Cancel'],
            'id': ['üîû Bahan dewasa', 'üí∞ Penjualan barang dan jasa', 'üò¥ Tidak menanggapi', 'ü¶® Lainnya', '‚úñ Batal']}
        self.user_true_complaint = {'ru': ['‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'], 'uk': ['‚úÖ –°–∫–∞—Ä–≥–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞'],
                                    'en': ['‚úÖ The complaint has been sent'], 'id': ['‚úÖ Keluhan telah dikirim']}
        self.user_complaint = {'all': ['1üîû', '2üíä', '3üí∞', '4ü¶®', '9']}
        self.user_sleep = {'all': ['1', '2']}
        self.user_wait_anket = {'ru': ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'], 'uk': ['–î–∏–≤–∏—Ç–∏—Å—è –∞–Ω–∫–µ—Ç–∏'], 'en': ['View profiles'],
                                'id': ['Lihat profil']}

        self.server_complaint = {'1üîû': 'üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', '2üíä': ' üíä–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤',
                                 '3üí∞': 'üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥', '4ü¶®': 'ü¶® –î—Ä—É–≥–æ–µ'}

    # —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ç–æ-—Ç–æ –∏–ª–∏ –Ω–µ—Ç
    def one_love(self, message, ankets):
        self.id = message.from_user.id

        self.user_love_anket = ankets

        self.ind = 0
        self.count_love_anket = len(self.user_love_anket)

        bot.clear_step_handler(message)

        self.lang, self.male = get_something('lang, male', self.id)

        random_chisl = random.randint(1, 2)
        key = f'{self.lang}{random_chisl}'
        send_message_text = self.bot_love[key]

        if random_chisl == 1:
            send_message_text = send_message_text.replace('&',
                                                          self.bot_love_user_1[self.lang][self.male])
        if self.count_love_anket > 1:
            all_women = True
            for i in self.user_love_anket:
                if i[4] == 'm':
                    all_women = False

            all_man = True
            for i in self.user_love_anket:
                if i[4] == 'w':
                    all_man = False

            if all_man:
                send_message_text = send_message_text.replace('#', str(self.count_love_anket) + ' ' +
                                                              self.bot_love_user_2[key]['mm'])
            elif all_women:
                send_message_text = send_message_text.replace('#', str(self.count_love_anket) + ' ' +
                                                              self.bot_love_user_2[key]['wm'])
            else:
                send_message_text = send_message_text.replace('#', str(self.count_love_anket) + ' ' +
                                                              self.bot_love_user_2[key]['ma'])
        else:
            send_message_text = send_message_text.replace('#', str(self.count_love_anket) + ' ' +
                                                          self.bot_love_user_2[key][
                                                              self.user_love_anket[self.ind][4]])

        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup.add(*self.user_love[f'all{random_chisl}'])

        send_message = bot.send_message(message.chat.id, send_message_text, reply_markup=markup)
        bot.register_next_step_handler(send_message, self.two_love)

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ç–æ-—Ç–æ –ª–∞–π–∫–Ω—É–ª, –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É - '–ü–æ–∫–∞–∑–∞—Ç—å 1 –¥–µ–≤—É—à–∫—É, –∫–æ—Ç–æ—Ä–æ–π —è –Ω—Ä–∞–≤–ª—é—Å—å. 1. –î–ê 2. –ù–ï–¢'
    def two_love(self, message, many_anket=False):
        # –º—ã –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ–Ω—é—à–∫–∏, –∏ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ–∫–∞ —á—Ç–æ–≥ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –æ –ª–∞–π–∫–∞—Ö –∞–Ω–∫–µ—Ç—ã
        exec(f'global run{self.id}\nrun{self.id}=None')

        try:
            lock.acquire(True)

            # —Ç–∞–∫, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª, —á—Ç–æ –µ–≥–æ –ª–∞–π–∫–Ω—É–ª–∏, —Ç–æ –æ–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
            c.execute('UPDATE users SET count_of_send_message = 0 WHERE id_tg = ?', (self.id,))
            db.commit()
        finally:
            lock.release()

        text = message.text

        if (text == self.user_love[f'all1'][0] or text == self.user_love['all2'][0]) or many_anket:
            if self.ind < self.count_love_anket:
                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
                markup.add(*self.user_anket[self.lang])

                send_message = send_anket(message, self.user_love_anket[self.ind][1], markup, True)
                if self.user_love_anket[self.ind][7]:
                    send_message = bot.send_message(message.chat.id,
                                                    self.bot_text[self.lang].replace('#', self.bot_send[self.lang][
                                                        self.user_love_anket[self.ind][4]]) +
                                                    self.user_love_anket[self.ind][7])
                elif self.user_love_anket[self.ind][8]:
                    send_message = bot.send_video(message.chat.id, self.user_love_anket[self.ind][8], 15,
                                                  caption=self.bot_video[self.lang].replace('#',
                                                                                            self.bot_send[
                                                                                                self.lang][
                                                                                                self.user_love_anket[
                                                                                                    self.ind][4]]))
                elif self.user_love_anket[self.ind][9]:
                    send_message = bot.send_photo(chat_id=message.chat.id, photo=self.user_love_anket[self.ind][9],
                                                  caption=self.bot_photo[self.lang].replace('#',
                                                                                            self.bot_send[self.lang][
                                                                                                self.user_love_anket[
                                                                                                    self.ind][4]]))

                bot.register_next_step_handler(send_message, self.three_love)
            else:
                Menu().after_something(message)
        elif text == self.user_love['all1'][1]:
            Menu().after_something(message)
        elif text == self.user_love['all2'][2]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(*self.user_sleep['all'])

            send_message = bot.send_message(message.chat.id, self.bot_sleep[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.sleep_love)
        elif text == self.user_love['all2'][1]:
            MyAnket().one_my_anket(message, 'command')
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_love)

    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ, —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª (–ª–∞–π–∫, –¥–∏–∑–ª–∞–π–∫, –∂–∞–ª–æ–±–∞ –∏ —Ç.–¥.) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –µ–≥–æ –ª–∞–π–∫–Ω—É–ª
    def three_love(self, message):
        text = message.text
        if text == self.user_anket[self.lang][0]:
            markup = InlineKeyboardMarkup(row_width=1)
            complaint = InlineKeyboardButton(self.user_link[self.lang][0],
                                             callback_data=f'complaint_{self.user_love_anket[self.ind][0]}')
            markup.add(complaint)

            if self.user_love_anket[self.ind][3] is None:
                bot.send_contact(message.chat.id, phone_number=self.user_love_anket[self.ind][5],
                                 first_name=self.user_love_anket[self.ind][6], )
                bot.send_message(message.chat.id, self.bot_link[self.lang].replace('#', ''), reply_markup=markup)
            else:
                bot.send_message(message.chat.id,
                                 self.bot_link[self.lang].replace('#', f'üëâ @{self.user_love_anket[self.ind][3]}'),
                                 reply_markup=markup)

            try:
                lock.acquire(True)

                c.execute('UPDATE love SET active = 0 WHERE from_user = ? AND to_user = ?',
                          (self.user_love_anket[self.ind][1], self.user_love_anket[self.ind][2]))
                db.commit()
            finally:
                lock.release()

            self.ind += 1

            self.two_love(message, True)
        elif text == self.user_anket[self.lang][1]:
            try:
                lock.acquire(True)

                c.execute('UPDATE love SET active = 0 WHERE from_user = ? AND to_user = ?',
                          (self.user_love_anket[self.ind][1], self.user_love_anket[self.ind][2]))
                db.commit()
            finally:
                lock.release()

            self.ind += 1

            self.two_love(message, True)
        elif text == self.user_anket[self.lang][2]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
            markup.add(*self.user_complaint['all'])

            send_message = bot.send_message(message.chat.id, self.bot_complaint[self.lang], reply_markup=markup)
            bot.register_next_step_handler(send_message, self.complaint)
        elif text == self.user_anket[self.lang][3]:
            Menu().after_something(message)
        else:
            if errors(message, self):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.two_love)

    def complaint(self, message):
        text = message.text

        if text in self.user_complaint['all']:
            if text != '9':
                bot.send_message(message.chat.id, self.bot_true_complaint[self.lang])

                try:
                    lock.acquire(True)

                    c.execute('INSERT INTO complaint(from_user, to_user, type) VALUES(?, ?, ?)',
                              (self.id, self.user_love_anket[self.ind][1], self.server_complaint[text]))
                    db.commit()

                    c.execute('UPDATE love SET active = 0 WHERE from_user = ? AND to_user = ?',
                              (self.user_love_anket[self.ind][1], self.user_love_anket[self.ind][2]))
                    db.commit()
                finally:
                    lock.release()

                self.ind += 1
            self.two_love(message, True)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.complaint)

    # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—Ç–µ–ª –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É
    def sleep_love(self, message):
        text = message.text

        if text == self.user_sleep['all'][0]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(*self.user_wait_anket[self.lang])

            send_message = bot.send_message(message.chat.id, self.bot_wait_anket[self.lang], reply_markup=markup)

            try:
                lock.acquire(True)

                c.execute('UPDATE users SET is_search = False WHERE id_tg = ?', (self.id,))
                db.commit()
            finally:
                lock.release()

            bot.register_next_step_handler(send_message, lambda message: wait_anket(message, 'wait'))
        elif text == self.user_sleep['all'][1]:
            markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
            markup.add(*self.user_anket[self.lang])

            send_message = send_anket(message, self.user_love_anket[self.ind][1], markup, True)
            bot.register_next_step_handler(send_message, self.three_love)
        else:
            if errors(message):
                send_message = bot.send_message(message.chat.id, self.bot_error[self.lang])
                bot.register_next_step_handler(send_message, self.sleep_love)


# —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—ë –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–∞—Ç–∏—Ä–≤–∞–µ—Ç –≤—Å–µ –ª–∞–π–∫–∏ –∞–Ω–∫–µ—Ç
def like_ankets_search():
    while True:
        try:
            lock.acquire(True)

            # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏
            c.execute(
                'SELECT love_id, from_user, to_user, from_username, from_male, from_phone, from_first_name, text, video, photo FROM love WHERE active = 1 GROUP BY from_user, to_user, from_phone')
            user_love_ankets = c.fetchall()
        finally:
            lock.release()

        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ id, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏
        users_id = set([i[2] for i in user_love_ankets])

        for id in users_id:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–µ–Ω—é, —Ç–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —É –Ω–∞—Å –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±—ä–µ–∫—Ç telebot.Message, –∞ –∏–Ω–∞—á–µ None
            message = globals().get(f'run{id}', None)

            if message:
                # –ø–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                send_ankets = [i for i in user_love_ankets if i[2] == id]

                try:
                    lock.acquire(True)

                    c.execute('SELECT count_of_send_message FROM users WHERE id_tg = ?', (id,))
                    # —É–∑–Ω–∞—ë–º —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –ª–∞–π–∫–Ω—É–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    count_of_send_message = c.fetchone()[0]

                    # –∏ –µ—Å–ª–∏ –º—ã –≤–∏–¥–∏–º, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –µ—â—ë –ª–∞–π–∫–µ –∫ –∞–Ω–∫–µ—Ç–µ, —Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º, –∞ —Ç–∞–∫–∂–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ª–∞–π–∫–æ–≤
                    if len(send_ankets) > count_of_send_message:
                        c.execute('UPDATE users SET count_of_send_message = ? WHERE id_tg = ?', (len(send_ankets), id))
                        db.commit()
                finally:
                    lock.release()

                if send_ankets and len(send_ankets) > count_of_send_message:
                    Love().one_love(message, send_ankets)


# –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤ —Ñ–æ–Ω–µ
Thread(target=like_ankets_search).start()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
@bot.message_handler(commands=['start', 'help'])
def start_func(message):
    # —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç—Å—ã–ª–∞–ª–∏—Å—å –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    if globals().get(f'start_time_{message.from_user.id}', 0) < time.time():
        exec(f'global start_time_{message.from_user.id}\nstart_time_{message.from_user.id} = time.time()+5')

        try:
            lock.acquire(True)

            c.execute('SELECT reg FROM users WHERE id_tg = ?', (message.from_user.id,))
            cf = c.fetchone()
        finally:
            lock.release()

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—à—ë–ª –ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ–Ω –∏–ª–∏ –Ω–µ—Ç
        if " " in message.text:
            referrer_candidate = message.text.split()[1]

            try:
                lock.acquire(True)
                c.execute('SELECT users_id FROM users WHERE id_tg = ?', (referrer_candidate,))
                users_id = c.fetchone()

                if users_id and str(message.from_user.id) != referrer_candidate and cf is None:
                    c.execute('SELECT referrals_id FROM referrals WHERE tg_id = ?', (message.from_user.id,))

                    if c.fetchone() is None:
                        c.execute('INSERT INTO referrals(tg_id, date_created, users_id) VALUES(?, ?, ?)',
                                  (message.from_user.id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), users_id[0]))
                        db.commit()
            finally:
                lock.release()

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º
        if cf is None:
            try:
                lock.acquire(True)
                c.execute('INSERT INTO users(id_tg, lang_code, reg) VALUES(?, ?, ?)',
                          (message.from_user.id, message.from_user.language_code, 0))
                db.commit()
            finally:
                lock.release()

            Lang().one_lang(message, Start().one_start)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å–æ–∑–¥–∞–ª –∞–Ω–∫–µ—Ç—É
        elif cf[0] == 0:
            Lang().one_lang(message, Start().one_start)
        # –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ
        else:
            Lang().one_lang(message, lambda message: MyAnket().one_my_anket(message, 'command'))


# —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω—è–µ—Ç callback-inline –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∞–π–∫–Ω—É–ª –≤ –æ—Ç–≤–µ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(lambda callback: callback.data)
def complaint_callback(callback):
    user_link = {'ru': ['‚ö† –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'], 'uk': ['‚ö† –ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—è'], 'en': ['‚ö† Complain'],
                 'id': ['‚ö† Mengeluh']}
    user_link_complaint = {
        'ru': ['üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', 'üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥', 'üò¥ –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'ü¶® –î—Ä—É–≥–æ–µ', '‚úñ –û—Ç–º–µ–Ω–∞'],
        'uk': ['üîû –ú–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö', 'üí∞ –ü—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –ø–æ—Å–ª—É–≥', 'üò¥ –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î', 'ü¶® –Ü–Ω—à–µ',
               '‚úñ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è'],
        'en': ['üîû Adult material', 'üí∞ Sale of goods and services', 'üò¥ Not responding', 'ü¶® Other', '‚úñ Cancel'],
        'id': ['üîû Bahan dewasa', 'üí∞ Penjualan barang dan jasa', 'üò¥ Tidak menanggapi', 'ü¶® Lainnya', '‚úñ Batal']}
    user_true_complaint = {'ru': ['‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'], 'uk': ['‚úÖ –°–∫–∞—Ä–≥–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞'],
                           'en': ['‚úÖ The complaint has been sent'], 'id': ['‚úÖ Keluhan telah dikirim']}
    user_true_true_complaint = {'ru': '–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É!', 'uk': '–í–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —Å–∫–∞—Ä–≥—É!',
                                'en': 'You have already sent a complaint!', 'id': 'Anda sudah mengirim keluhan!'}

    server_complaint = {'porno': 'üîû –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', 'sale': 'üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥',
                        'not responding': 'üò¥ –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç', 'other': 'ü¶® –î—Ä—É–≥–æ–µ'}

    id = callback.from_user.id
    lang = get_something('lang', id)[0]
    data, love_id = callback.data.split('_')

    if data == 'complaint':
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(user_link_complaint[lang][0], callback_data=f'porno_{love_id}'),
                   InlineKeyboardButton(user_link_complaint[lang][1], callback_data=f'sale_{love_id}'),
                   InlineKeyboardButton(user_link_complaint[lang][2], callback_data=f'not responding_{love_id}'),
                   InlineKeyboardButton(user_link_complaint[lang][3], callback_data=f'other_{love_id}'),
                   InlineKeyboardButton(user_link_complaint[lang][4], callback_data=f'cancel_{love_id}'), )

        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text=callback.message.text, reply_markup=markup)
    elif data == 'cancel':
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(user_link[lang][0], callback_data=f'complaint_{love_id}'))

        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text=callback.message.text, reply_markup=markup)
    elif data == 'true complaint':
        bot.answer_callback_query(callback_query_id=callback.id, text=user_true_true_complaint[lang])
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton(user_true_complaint[lang][0], callback_data=f'true complaint_{love_id}'))

        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text=callback.message.text, reply_markup=markup)

        try:
            lock.acquire(True)

            c.execute('SELECT from_user FROM love WHERE love_id = ?', (love_id,))
            from_user = c.fetchone()

            c.execute('DELETE FROM love WHERE love_id = ?', (love_id,))
            db.commit()

            c.execute('INSERT INTO complaint(from_user, to_user, type) VALUES(?, ?, ?)',
                      (id, from_user[0], server_complaint[data]))
            db.commit()
        finally:
            lock.release()


bot.polling(none_stop=True)

# –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
if db:
    db.close()

